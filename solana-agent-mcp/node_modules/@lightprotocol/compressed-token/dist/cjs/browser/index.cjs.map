{"version":3,"file":"index.cjs","sources":["../../../../../src/instructions/pack-compressed-token-accounts.ts","../../../../../src/constants.ts","../../../../../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js","../../../../../src/layout.ts","../../../../../src/program.ts","../../../../../src/utils/select-input-accounts.ts","../../../../../src/idl.ts","../../../../../src/actions/approve-and-mint-to.ts","../../../../../src/actions/compress.ts","../../../../../src/actions/compress-spl-token-account.ts","../../../../../src/actions/create-mint.ts","../../../../../src/actions/create-token-pool.ts","../../../../../src/actions/create-token-program-lookup-table.ts","../../../../../src/actions/decompress.ts","../../../../../src/actions/merge-token-accounts.ts","../../../../../src/actions/mint-to.ts","../../../../../src/actions/transfer.ts"],"sourcesContent":["import {\n    ParsedTokenAccount,\n    InputTokenDataWithContext,\n    getIndexOrAdd,\n    bn,\n    padOutputStateMerkleTrees,\n} from '@lightprotocol/stateless.js';\nimport { PublicKey, AccountMeta } from '@solana/web3.js';\nimport {\n    PackedTokenTransferOutputData,\n    TokenTransferOutputData,\n} from '../types';\n\nexport type PackCompressedTokenAccountsParams = {\n    /** Input state to be consumed */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * State trees that the output should be inserted into. Defaults to the 0th\n     * state tree of the input state. Gets padded to the length of\n     * outputCompressedAccounts.\n     */\n    outputStateTrees?: PublicKey[] | PublicKey;\n    /** Optional remaining accounts to append to */\n    remainingAccounts?: PublicKey[];\n    /**\n     *  Root indices that are used on-chain to fetch the correct root\n     *  from the state Merkle tree account for validity proof verification.\n     */\n    rootIndices: number[];\n    tokenTransferOutputs: TokenTransferOutputData[];\n};\n\n/**\n * Packs Compressed Token Accounts.\n */\nexport function packCompressedTokenAccounts(\n    params: PackCompressedTokenAccountsParams,\n): {\n    inputTokenDataWithContext: InputTokenDataWithContext[];\n    remainingAccountMetas: AccountMeta[];\n    packedOutputTokenData: PackedTokenTransferOutputData[];\n} {\n    const {\n        inputCompressedTokenAccounts,\n        outputStateTrees,\n        remainingAccounts = [],\n        rootIndices,\n        tokenTransferOutputs,\n    } = params;\n\n    const _remainingAccounts = remainingAccounts.slice();\n    let delegateIndex: number | null = null;\n\n    if (\n        inputCompressedTokenAccounts.length > 0 &&\n        inputCompressedTokenAccounts[0].parsed.delegate\n    ) {\n        delegateIndex = getIndexOrAdd(\n            _remainingAccounts,\n            inputCompressedTokenAccounts[0].parsed.delegate,\n        );\n    }\n    /// TODO: move pubkeyArray to remainingAccounts\n    /// Currently just packs 'delegate' to pubkeyArray\n    const packedInputTokenData: InputTokenDataWithContext[] = [];\n    /// pack inputs\n    inputCompressedTokenAccounts.forEach(\n        (account: ParsedTokenAccount, index) => {\n            const merkleTreePubkeyIndex = getIndexOrAdd(\n                _remainingAccounts,\n                account.compressedAccount.merkleTree,\n            );\n\n            const nullifierQueuePubkeyIndex = getIndexOrAdd(\n                _remainingAccounts,\n                account.compressedAccount.nullifierQueue,\n            );\n\n            packedInputTokenData.push({\n                amount: account.parsed.amount,\n                delegateIndex,\n                merkleContext: {\n                    merkleTreePubkeyIndex,\n                    nullifierQueuePubkeyIndex,\n                    leafIndex: account.compressedAccount.leafIndex,\n                    queueIndex: null,\n                },\n                rootIndex: rootIndices[index],\n                lamports: account.compressedAccount.lamports.eq(bn(0))\n                    ? null\n                    : account.compressedAccount.lamports,\n                tlv: null,\n            });\n        },\n    );\n\n    /// pack output state trees\n    const paddedOutputStateMerkleTrees = padOutputStateMerkleTrees(\n        outputStateTrees,\n        tokenTransferOutputs.length,\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    const packedOutputTokenData: PackedTokenTransferOutputData[] = [];\n    paddedOutputStateMerkleTrees.forEach((account, index) => {\n        const merkleTreeIndex = getIndexOrAdd(_remainingAccounts, account);\n        packedOutputTokenData.push({\n            owner: tokenTransferOutputs[index].owner,\n            amount: tokenTransferOutputs[index].amount,\n            lamports: tokenTransferOutputs[index].lamports?.eq(bn(0))\n                ? null\n                : tokenTransferOutputs[index].lamports,\n            merkleTreeIndex,\n            tlv: null,\n        });\n    });\n    // to meta\n    const remainingAccountMetas = _remainingAccounts.map(\n        (account): AccountMeta => ({\n            pubkey: account,\n            isWritable: true,\n            isSigner: false,\n        }),\n    );\n\n    return {\n        inputTokenDataWithContext: packedInputTokenData,\n        remainingAccountMetas,\n        packedOutputTokenData,\n    };\n}\n","export const POOL_SEED = Buffer.from('pool');\n\nexport const CPI_AUTHORITY_SEED = Buffer.from('cpi_authority');\n\nexport const SPL_TOKEN_MINT_RENT_EXEMPT_BALANCE = 1461600;\n\nexport const CREATE_TOKEN_POOL_DISCRIMINATOR = Buffer.from([\n    23, 169, 27, 122, 147, 169, 209, 152,\n]);\nexport const MINT_TO_DISCRIMINATOR = Buffer.from([\n    241, 34, 48, 186, 37, 179, 123, 192,\n]);\nexport const TRANSFER_DISCRIMINATOR = Buffer.from([\n    163, 52, 200, 231, 140, 3, 69, 186,\n]);\nexport const COMPRESS_SPL_TOKEN_ACCOUNT_DISCRIMINATOR = Buffer.from([\n    112, 230, 105, 101, 145, 202, 157, 97,\n]);\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","import {\n    struct,\n    option,\n    vec,\n    bool,\n    u64,\n    u8,\n    publicKey,\n    array,\n    u32,\n    u16,\n    vecU8,\n} from '@coral-xyz/borsh';\nimport { Buffer } from 'buffer';\nimport { AccountMeta, PublicKey } from '@solana/web3.js';\nimport { CompressedTokenProgram } from './program';\nimport {\n    CompressedTokenInstructionDataTransfer,\n    CompressSplTokenAccountInstructionData,\n    MintToInstructionData,\n} from './types';\nimport {\n    COMPRESS_SPL_TOKEN_ACCOUNT_DISCRIMINATOR,\n    MINT_TO_DISCRIMINATOR,\n    TRANSFER_DISCRIMINATOR,\n} from './constants';\n\nconst CompressedProofLayout = struct([\n    array(u8(), 32, 'a'),\n    array(u8(), 64, 'b'),\n    array(u8(), 32, 'c'),\n]);\n\nconst PackedTokenTransferOutputDataLayout = struct([\n    publicKey('owner'),\n    u64('amount'),\n    option(u64(), 'lamports'),\n    u8('merkleTreeIndex'),\n    option(vecU8(), 'tlv'),\n]);\n\nconst QueueIndexLayout = struct([u8('queueId'), u16('index')]);\n\nconst InputTokenDataWithContextLayout = struct([\n    u64('amount'),\n    option(u8(), 'delegateIndex'),\n    struct(\n        [\n            u8('merkleTreePubkeyIndex'),\n            u8('nullifierQueuePubkeyIndex'),\n            u32('leafIndex'),\n            option(QueueIndexLayout, 'queueIndex'),\n        ],\n        'merkleContext',\n    ),\n    u16('rootIndex'),\n    option(u64(), 'lamports'),\n    option(vecU8(), 'tlv'),\n]);\n\nexport const DelegatedTransferLayout = struct([\n    publicKey('owner'),\n    option(u8(), 'delegateChangeAccountIndex'),\n]);\n\nexport const CpiContextLayout = struct([\n    bool('setContext'),\n    bool('firstSetContext'),\n    u8('cpiContextAccountIndex'),\n]);\n\nexport const CompressedTokenInstructionDataTransferLayout = struct([\n    option(CompressedProofLayout, 'proof'),\n    publicKey('mint'),\n    option(DelegatedTransferLayout, 'delegatedTransfer'),\n    vec(InputTokenDataWithContextLayout, 'inputTokenDataWithContext'),\n    vec(PackedTokenTransferOutputDataLayout, 'outputCompressedAccounts'),\n    bool('isCompress'),\n    option(u64(), 'compressOrDecompressAmount'),\n    option(CpiContextLayout, 'cpiContext'),\n    option(u8(), 'lamportsChangeAccountMerkleTreeIndex'),\n]);\n\nexport const mintToLayout = struct([\n    vec(publicKey(), 'recipients'),\n    vec(u64(), 'amounts'),\n    option(u64(), 'lamports'),\n]);\n\nexport const compressSplTokenAccountInstructionDataLayout = struct([\n    publicKey('owner'),\n    option(u64(), 'remainingAmount'),\n    option(CpiContextLayout, 'cpiContext'),\n]);\n\nexport function encodeMintToInstructionData(\n    data: MintToInstructionData,\n): Buffer {\n    const buffer = Buffer.alloc(1000);\n    const len = mintToLayout.encode(\n        {\n            recipients: data.recipients,\n            amounts: data.amounts,\n            lamports: data.lamports,\n        },\n        buffer,\n    );\n\n    return Buffer.concat([MINT_TO_DISCRIMINATOR, buffer.slice(0, len)]);\n}\n\nexport function decodeMintToInstructionData(\n    buffer: Buffer,\n): MintToInstructionData {\n    const data: any = mintToLayout.decode(\n        buffer.slice(MINT_TO_DISCRIMINATOR.length),\n    );\n    return {\n        recipients: data.recipients,\n        amounts: data.amounts,\n        lamports: data.lamports,\n    };\n}\n\nexport function encodeCompressSplTokenAccountInstructionData(\n    data: CompressSplTokenAccountInstructionData,\n): Buffer {\n    const buffer = Buffer.alloc(1000);\n    const len = compressSplTokenAccountInstructionDataLayout.encode(\n        {\n            owner: data.owner,\n            remainingAmount: data.remainingAmount,\n            cpiContext: data.cpiContext,\n        },\n        buffer,\n    );\n\n    return Buffer.concat([\n        COMPRESS_SPL_TOKEN_ACCOUNT_DISCRIMINATOR,\n        buffer.slice(0, len),\n    ]);\n}\n\nexport function decodeCompressSplTokenAccountInstructionData(\n    buffer: Buffer,\n): CompressSplTokenAccountInstructionData {\n    const data: any = compressSplTokenAccountInstructionDataLayout.decode(\n        buffer.slice(COMPRESS_SPL_TOKEN_ACCOUNT_DISCRIMINATOR.length),\n    );\n    return {\n        owner: data.owner,\n        remainingAmount: data.remainingAmount,\n        cpiContext: data.cpiContext,\n    };\n}\nexport function encodeTransferInstructionData(\n    data: CompressedTokenInstructionDataTransfer,\n): Buffer {\n    const buffer = Buffer.alloc(1000);\n\n    const len = CompressedTokenInstructionDataTransferLayout.encode(\n        data,\n        buffer,\n    );\n\n    const lengthBuffer = Buffer.alloc(4);\n    lengthBuffer.writeUInt32LE(len, 0);\n\n    return Buffer.concat([\n        TRANSFER_DISCRIMINATOR,\n        lengthBuffer,\n        buffer.slice(0, len),\n    ]);\n}\n\nexport function decodeTransferInstructionData(\n    buffer: Buffer,\n): CompressedTokenInstructionDataTransfer {\n    return CompressedTokenInstructionDataTransferLayout.decode(\n        buffer.slice(TRANSFER_DISCRIMINATOR.length + 4),\n    ) as CompressedTokenInstructionDataTransfer;\n}\n\ninterface BaseAccountsLayoutParams {\n    feePayer: PublicKey;\n    authority: PublicKey;\n    cpiAuthorityPda: PublicKey;\n    lightSystemProgram: PublicKey;\n    registeredProgramPda: PublicKey;\n    noopProgram: PublicKey;\n    accountCompressionAuthority: PublicKey;\n    accountCompressionProgram: PublicKey;\n    selfProgram: PublicKey;\n    systemProgram: PublicKey;\n}\nexport type createTokenPoolAccountsLayoutParams = {\n    feePayer: PublicKey;\n    tokenPoolPda: PublicKey;\n    systemProgram: PublicKey;\n    mint: PublicKey;\n    tokenProgram: PublicKey;\n    cpiAuthorityPda: PublicKey;\n};\nexport type mintToAccountsLayoutParams = BaseAccountsLayoutParams & {\n    mint: PublicKey;\n    tokenPoolPda: PublicKey;\n    tokenProgram: PublicKey;\n    merkleTree: PublicKey;\n    solPoolPda: PublicKey | null;\n};\nexport type transferAccountsLayoutParams = BaseAccountsLayoutParams & {\n    tokenPoolPda?: PublicKey;\n    compressOrDecompressTokenAccount?: PublicKey;\n    tokenProgram?: PublicKey;\n};\nexport type approveAccountsLayoutParams = BaseAccountsLayoutParams;\nexport type revokeAccountsLayoutParams = approveAccountsLayoutParams;\nexport type freezeAccountsLayoutParams = BaseAccountsLayoutParams & {\n    mint: PublicKey;\n};\nexport type thawAccountsLayoutParams = freezeAccountsLayoutParams;\n\nexport const createTokenPoolAccountsLayout = (\n    accounts: createTokenPoolAccountsLayoutParams,\n): AccountMeta[] => {\n    const {\n        feePayer,\n        tokenPoolPda,\n        systemProgram,\n        mint,\n        tokenProgram,\n        cpiAuthorityPda,\n    } = accounts;\n    return [\n        { pubkey: feePayer, isSigner: true, isWritable: true },\n        { pubkey: tokenPoolPda, isSigner: false, isWritable: true },\n        { pubkey: systemProgram, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: tokenProgram, isSigner: false, isWritable: false },\n        { pubkey: cpiAuthorityPda, isSigner: false, isWritable: false },\n    ];\n};\n\nexport const mintToAccountsLayout = (\n    accounts: mintToAccountsLayoutParams,\n): AccountMeta[] => {\n    const defaultPubkey = CompressedTokenProgram.programId;\n    const {\n        feePayer,\n        authority,\n        cpiAuthorityPda,\n        mint,\n        tokenPoolPda,\n        tokenProgram,\n        lightSystemProgram,\n        registeredProgramPda,\n        noopProgram,\n        accountCompressionAuthority,\n        accountCompressionProgram,\n        merkleTree,\n        selfProgram,\n        systemProgram,\n        solPoolPda,\n    } = accounts;\n\n    const accountsList: AccountMeta[] = [\n        { pubkey: feePayer, isSigner: true, isWritable: true },\n        { pubkey: authority, isSigner: true, isWritable: false },\n        { pubkey: cpiAuthorityPda, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: true },\n        { pubkey: tokenPoolPda, isSigner: false, isWritable: true },\n        { pubkey: tokenProgram, isSigner: false, isWritable: false },\n        { pubkey: lightSystemProgram, isSigner: false, isWritable: false },\n        { pubkey: registeredProgramPda, isSigner: false, isWritable: false },\n        { pubkey: noopProgram, isSigner: false, isWritable: false },\n        {\n            pubkey: accountCompressionAuthority,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: accountCompressionProgram,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: merkleTree, isSigner: false, isWritable: true },\n        { pubkey: selfProgram, isSigner: false, isWritable: false },\n        { pubkey: systemProgram, isSigner: false, isWritable: false },\n        {\n            pubkey: solPoolPda ?? defaultPubkey,\n            isSigner: false,\n            isWritable: true,\n        },\n    ];\n\n    return accountsList;\n};\n\nexport const transferAccountsLayout = (\n    accounts: transferAccountsLayoutParams,\n): AccountMeta[] => {\n    const defaultPubkey = CompressedTokenProgram.programId;\n    const {\n        feePayer,\n        authority,\n        cpiAuthorityPda,\n        lightSystemProgram,\n        registeredProgramPda,\n        noopProgram,\n        accountCompressionAuthority,\n        accountCompressionProgram,\n        selfProgram,\n        tokenPoolPda,\n        compressOrDecompressTokenAccount,\n        tokenProgram,\n        systemProgram,\n    } = accounts;\n\n    const accountsList: AccountMeta[] = [\n        { pubkey: feePayer, isSigner: true, isWritable: true },\n        { pubkey: authority, isSigner: true, isWritable: false },\n        { pubkey: cpiAuthorityPda, isSigner: false, isWritable: false },\n        { pubkey: lightSystemProgram, isSigner: false, isWritable: false },\n        { pubkey: registeredProgramPda, isSigner: false, isWritable: false },\n        { pubkey: noopProgram, isSigner: false, isWritable: false },\n        {\n            pubkey: accountCompressionAuthority,\n            isSigner: false,\n            isWritable: false,\n        },\n        {\n            pubkey: accountCompressionProgram,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: selfProgram, isSigner: false, isWritable: false },\n        {\n            pubkey: tokenPoolPda ?? defaultPubkey,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: compressOrDecompressTokenAccount ?? defaultPubkey,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: tokenProgram ?? defaultPubkey,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: systemProgram, isSigner: false, isWritable: false },\n    ];\n\n    return accountsList;\n};\n\n// TODO: use this layout for approve/revoke/freeze/thaw once we add them\n// export const approveAccountsLayout = (\n//     accounts: approveAccountsLayoutParams,\n// ): AccountMeta[] => {\n//     const {\n//         feePayer,\n//         authority,\n//         cpiAuthorityPda,\n//         lightSystemProgram,\n//         registeredProgramPda,\n//         noopProgram,\n//         accountCompressionAuthority,\n//         accountCompressionProgram,\n//         selfProgram,\n//         systemProgram,\n//     } = accounts;\n\n//     return [\n//         { pubkey: feePayer, isSigner: true, isWritable: true },\n//         { pubkey: authority, isSigner: true, isWritable: false },\n//         { pubkey: cpiAuthorityPda, isSigner: false, isWritable: false },\n//         { pubkey: lightSystemProgram, isSigner: false, isWritable: false },\n//         { pubkey: registeredProgramPda, isSigner: false, isWritable: false },\n//         { pubkey: noopProgram, isSigner: false, isWritable: false },\n//         {\n//             pubkey: accountCompressionAuthority,\n//             isSigner: false,\n//             isWritable: false,\n//         },\n//         {\n//             pubkey: accountCompressionProgram,\n//             isSigner: false,\n//             isWritable: false,\n//         },\n//         { pubkey: selfProgram, isSigner: false, isWritable: false },\n//         { pubkey: systemProgram, isSigner: false, isWritable: false },\n//     ];\n// };\n\n// export const revokeAccountsLayout = approveAccountsLayout;\n\n// export const freezeAccountsLayout = (\n//     accounts: freezeAccountsLayoutParams,\n// ): AccountMeta[] => {\n//     const {\n//         feePayer,\n//         authority,\n//         cpiAuthorityPda,\n//         lightSystemProgram,\n//         registeredProgramPda,\n//         noopProgram,\n//         accountCompressionAuthority,\n//         accountCompressionProgram,\n//         selfProgram,\n//         systemProgram,\n//         mint,\n//     } = accounts;\n\n//     return [\n//         { pubkey: feePayer, isSigner: true, isWritable: true },\n//         { pubkey: authority, isSigner: true, isWritable: false },\n//         { pubkey: cpiAuthorityPda, isSigner: false, isWritable: false },\n//         { pubkey: lightSystemProgram, isSigner: false, isWritable: false },\n//         { pubkey: registeredProgramPda, isSigner: false, isWritable: false },\n//         { pubkey: noopProgram, isSigner: false, isWritable: false },\n//         {\n//             pubkey: accountCompressionAuthority,\n//             isSigner: false,\n//             isWritable: false,\n//         },\n//         {\n//             pubkey: accountCompressionProgram,\n//             isSigner: false,\n//             isWritable: false,\n//         },\n//         { pubkey: selfProgram, isSigner: false, isWritable: false },\n//         { pubkey: systemProgram, isSigner: false, isWritable: false },\n//         { pubkey: mint, isSigner: false, isWritable: false },\n//     ];\n// };\n\n// export const thawAccountsLayout = freezeAccountsLayout;\n","import {\n    PublicKey,\n    TransactionInstruction,\n    SystemProgram,\n    Connection,\n    AddressLookupTableProgram,\n    AccountMeta,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n    CompressedProof,\n    LightSystemProgram,\n    ParsedTokenAccount,\n    bn,\n    defaultStaticAccountsStruct,\n    sumUpLamports,\n    toArray,\n    validateSameOwner,\n    validateSufficientBalance,\n    defaultTestStateTreeAccounts,\n} from '@lightprotocol/stateless.js';\nimport {\n    MINT_SIZE,\n    TOKEN_2022_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    createInitializeMint2Instruction,\n    createMintToInstruction,\n} from '@solana/spl-token';\nimport {\n    CPI_AUTHORITY_SEED,\n    POOL_SEED,\n    CREATE_TOKEN_POOL_DISCRIMINATOR,\n} from './constants';\nimport { packCompressedTokenAccounts } from './instructions/pack-compressed-token-accounts';\nimport {\n    encodeTransferInstructionData,\n    encodeCompressSplTokenAccountInstructionData,\n    encodeMintToInstructionData,\n    createTokenPoolAccountsLayout,\n    mintToAccountsLayout,\n    transferAccountsLayout,\n} from './layout';\nimport {\n    CompressedTokenInstructionDataTransfer,\n    TokenTransferOutputData,\n} from './types';\n\nexport type CompressParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * owner of the *uncompressed* token account.\n     */\n    owner: PublicKey;\n    /**\n     * source (associated) token account address.\n     */\n    source: PublicKey;\n    /**\n     * owner of the compressed token account.\n     * To compress to a batch of recipients, pass an array of PublicKeys.\n     */\n    toAddress: PublicKey | PublicKey[];\n    /**\n     * Mint address of the token to compress.\n     */\n    mint: PublicKey;\n    /**\n     * amount of tokens to compress.\n     */\n    amount: number | BN | number[] | BN[];\n    /**\n     * The state tree that the tx output should be inserted into. Defaults to a\n     * public state tree if unspecified.\n     */\n    outputStateTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type CompressSplTokenAccountParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Authority that owns the token account\n     */\n    authority: PublicKey;\n    /**\n     * Token account to compress\n     */\n    tokenAccount: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * Optional: remaining amount to leave in token account. Default: 0\n     */\n    remainingAmount?: BN;\n    /**\n     * The state tree that the compressed token account should be inserted into.\n     */\n    outputStateTree: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type DecompressParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * input state to be consumed\n     */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * address of **uncompressed** destination token account.\n     */\n    toAddress: PublicKey;\n    /**\n     * amount of tokens to decompress.\n     */\n    amount: number | BN;\n    /**\n     * The recent state root indices of the input state. The expiry is tied to\n     * the proof.\n     */\n    recentInputStateRootIndices: number[];\n    /**\n     * The recent validity proof for state inclusion of the input state. It\n     * expires after n slots.\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * The state tree that the change tx output should be inserted into.\n     * Defaults to a public state tree if unspecified.\n     */\n    outputStateTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type TransferParams = {\n    /**\n     * The payer of the transaction\n     */\n    payer: PublicKey;\n    /**\n     * The input state to be consumed\n     */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * Recipient address\n     */\n    toAddress: PublicKey;\n    /**\n     * Amount of tokens to transfer\n     */\n    amount: BN | number;\n    /**\n     * The recent state root indices of the input state. The expiry is tied to\n     * the proof.\n\n     */\n    recentInputStateRootIndices: number[];\n    /**\n     * The recent validity proof for state inclusion of the input state. It\n     * expires after n slots.\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * The state trees that the tx output should be inserted into. This can be a\n     * single PublicKey or an array of PublicKey. Defaults to the 0th state tree\n     * of input state.\n     */\n    outputStateTrees?: PublicKey[] | PublicKey;\n};\n\n/**\n * Create Mint account for compressed Tokens\n */\nexport type CreateMintParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Mint authority\n     */\n    authority: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * Mint decimals\n     */\n    decimals: number;\n    /**\n     * Optional: freeze authority\n     */\n    freezeAuthority: PublicKey | null;\n    /**\n     * lamport amount for mint account rent exemption\n     */\n    rentExemptBalance: number;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n    /**\n     * Optional: Mint size to use, defaults to MINT_SIZE\n     */\n    mintSize?: number;\n};\n\n/**\n * Parameters for merging compressed token accounts\n */\nexport type MergeTokenAccountsParams = {\n    /**\n     * Tx feepayer\n     */\n    payer: PublicKey;\n    /**\n     * Owner of the token accounts to be merged\n     */\n    owner: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * Array of compressed token accounts to merge\n     */\n    inputCompressedTokenAccounts: ParsedTokenAccount[];\n    /**\n     * Optional: Public key of the state tree to merge into\n     */\n    outputStateTree: PublicKey;\n    /**\n     * Optional: Recent validity proof for state inclusion\n     */\n    recentValidityProof: CompressedProof;\n    /**\n     * Optional: Recent state root indices of the input state\n     */\n    recentInputStateRootIndices: number[];\n};\n\n/**\n * Create compressed token accounts\n */\nexport type MintToParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Mint authority\n     */\n    authority: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * The Solana Public Keys to mint to.\n     */\n    toPubkey: PublicKey[] | PublicKey;\n    /**\n     * The amount of compressed tokens to mint.\n     */\n    amount: BN | BN[] | number | number[];\n    /**\n     * Public key of the state tree to mint into. Defaults to a public state\n     * tree if unspecified.\n     */\n    merkleTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\n/**\n * Register an existing SPL mint account to the compressed token program\n * Creates an omnibus account for the mint\n */\nexport type RegisterMintParams = {\n    /** Tx feepayer */\n    feePayer: PublicKey;\n    /** Mint public key */\n    mint: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\n/**\n * Mint from existing SPL mint to compressed token accounts\n */\nexport type ApproveAndMintToParams = {\n    /**\n     * Tx feepayer\n     */\n    feePayer: PublicKey;\n    /**\n     * Mint authority\n     */\n    authority: PublicKey;\n    /**\n     * Mint authority (associated) token account\n     */\n    authorityTokenAccount: PublicKey;\n    /**\n     * Mint public key\n     */\n    mint: PublicKey;\n    /**\n     * The Solana Public Key to mint to.\n     */\n    toPubkey: PublicKey;\n    /**\n     * The amount of compressed tokens to mint.\n     */\n    amount: BN | number;\n    /**\n     * Public key of the state tree to mint into. Defaults to a public state\n     * tree if unspecified.\n     */\n    merkleTree?: PublicKey;\n    /**\n     * Optional: The token program ID. Default: SPL Token Program ID\n     */\n    tokenProgramId?: PublicKey;\n};\n\nexport type CreateTokenProgramLookupTableParams = {\n    /**\n     * The payer of the transaction.\n     */\n    payer: PublicKey;\n    /**\n     * The authority of the transaction.\n     */\n    authority: PublicKey;\n    /**\n     *  Recently finalized Solana slot.\n     */\n    recentSlot: number;\n    /**\n     * Optional Mint addresses to store in the lookup table.\n     */\n    mints?: PublicKey[];\n    /**\n     * Optional additional addresses to store in the lookup table.\n     */\n    remainingAccounts?: PublicKey[];\n};\n\n/**\n * Sum up the token amounts of the compressed token accounts\n */\nexport const sumUpTokenAmount = (accounts: ParsedTokenAccount[]): BN => {\n    return accounts.reduce(\n        (acc, account: ParsedTokenAccount) => acc.add(account.parsed.amount),\n        bn(0),\n    );\n};\n\n/**\n * Validate that all the compressed token accounts are owned by the same owner.\n */\nexport const validateSameTokenOwner = (accounts: ParsedTokenAccount[]) => {\n    const owner = accounts[0].parsed.owner;\n    accounts.forEach(acc => {\n        if (!acc.parsed.owner.equals(owner)) {\n            throw new Error('Token accounts must be owned by the same owner');\n        }\n    });\n};\n\n/**\n * Parse compressed token accounts to get the mint, current owner and delegate.\n */\nexport const parseTokenData = (\n    compressedTokenAccounts: ParsedTokenAccount[],\n) => {\n    const mint = compressedTokenAccounts[0].parsed.mint;\n    const currentOwner = compressedTokenAccounts[0].parsed.owner;\n    const delegate = compressedTokenAccounts[0].parsed.delegate;\n\n    return { mint, currentOwner, delegate };\n};\n\n/**\n * Create the output state for a transfer transaction.\n * @param inputCompressedTokenAccounts  Input state\n * @param toAddress                     Recipient address\n * @param amount                        Amount of tokens to transfer\n * @returns                             Output token data for the transfer\n *                                      instruction\n */\nexport function createTransferOutputState(\n    inputCompressedTokenAccounts: ParsedTokenAccount[],\n    toAddress: PublicKey,\n    amount: number | BN,\n): TokenTransferOutputData[] {\n    amount = bn(amount);\n    const inputAmount = sumUpTokenAmount(inputCompressedTokenAccounts);\n    const inputLamports = sumUpLamports(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n\n    const changeAmount = inputAmount.sub(amount);\n\n    validateSufficientBalance(changeAmount);\n\n    if (changeAmount.eq(bn(0)) && inputLamports.eq(bn(0))) {\n        return [\n            {\n                owner: toAddress,\n                amount,\n                lamports: inputLamports,\n                tlv: null,\n            },\n        ];\n    }\n\n    /// validates token program\n    validateSameOwner(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    validateSameTokenOwner(inputCompressedTokenAccounts);\n\n    const outputCompressedAccounts: TokenTransferOutputData[] = [\n        {\n            owner: inputCompressedTokenAccounts[0].parsed.owner,\n            amount: changeAmount,\n            lamports: inputLamports,\n            tlv: null,\n        },\n        {\n            owner: toAddress,\n            amount,\n            lamports: bn(0),\n            tlv: null,\n        },\n    ];\n    return outputCompressedAccounts;\n}\n\n/**\n * Create the output state for a compress transaction.\n * @param inputCompressedTokenAccounts  Input state\n * @param amount                        Amount of tokens to compress\n * @returns                             Output token data for the compress\n *                                      instruction\n */\nexport function createDecompressOutputState(\n    inputCompressedTokenAccounts: ParsedTokenAccount[],\n    amount: number | BN,\n): TokenTransferOutputData[] {\n    amount = bn(amount);\n    const inputLamports = sumUpLamports(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    const inputAmount = sumUpTokenAmount(inputCompressedTokenAccounts);\n    const changeAmount = inputAmount.sub(amount);\n\n    validateSufficientBalance(changeAmount);\n\n    /// lamports gets decompressed\n    if (changeAmount.eq(bn(0)) && inputLamports.eq(bn(0))) {\n        return [];\n    }\n\n    validateSameOwner(\n        inputCompressedTokenAccounts.map(acc => acc.compressedAccount),\n    );\n    validateSameTokenOwner(inputCompressedTokenAccounts);\n\n    const tokenTransferOutputs: TokenTransferOutputData[] = [\n        {\n            owner: inputCompressedTokenAccounts[0].parsed.owner,\n            amount: changeAmount,\n            lamports: inputLamports,\n            tlv: null,\n        },\n    ];\n    return tokenTransferOutputs;\n}\n\nexport class CompressedTokenProgram {\n    /**\n     * @internal\n     */\n    constructor() {}\n\n    /**\n     * Public key that identifies the CompressedPda program\n     */\n    static programId: PublicKey = new PublicKey(\n        'cTokenmWW8bLPjZEBAUgYy3zKxQZW6VKi7bqNFEVv3m',\n    );\n\n    /**\n     * Set a custom programId via PublicKey or base58 encoded string.\n     * This method is not required for regular usage.\n     *\n     * Use this only if you know what you are doing.\n     */\n    static setProgramId(programId: PublicKey | string) {\n        this.programId =\n            typeof programId === 'string'\n                ? new PublicKey(programId)\n                : programId;\n    }\n\n    /** @internal */\n    static deriveTokenPoolPda(mint: PublicKey): PublicKey {\n        const seeds = [POOL_SEED, mint.toBuffer()];\n        const [address, _] = PublicKey.findProgramAddressSync(\n            seeds,\n            this.programId,\n        );\n        return address;\n    }\n\n    /** @internal */\n    static get deriveCpiAuthorityPda(): PublicKey {\n        const [address, _] = PublicKey.findProgramAddressSync(\n            [CPI_AUTHORITY_SEED],\n            this.programId,\n        );\n        return address;\n    }\n\n    /**\n     * Construct createMint instruction for compressed tokens.\n     * @returns [createMintAccountInstruction, initializeMintInstruction, createTokenPoolInstruction]\n     *\n     * Note that `createTokenPoolInstruction` must be executed after `initializeMintInstruction`.\n     */\n    static async createMint(\n        params: CreateMintParams,\n    ): Promise<TransactionInstruction[]> {\n        const {\n            mint,\n            authority,\n            feePayer,\n            rentExemptBalance,\n            tokenProgramId,\n            freezeAuthority,\n            mintSize,\n        } = params;\n\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        /// Create and initialize SPL Mint account\n        const createMintAccountInstruction = SystemProgram.createAccount({\n            fromPubkey: feePayer,\n            lamports: rentExemptBalance,\n            newAccountPubkey: mint,\n            programId: tokenProgram,\n            space: mintSize ?? MINT_SIZE,\n        });\n        const initializeMintInstruction = createInitializeMint2Instruction(\n            mint,\n            params.decimals,\n            authority,\n            freezeAuthority,\n            tokenProgram,\n        );\n\n        const createTokenPoolInstruction = await this.createTokenPool({\n            feePayer,\n            mint,\n            tokenProgramId: tokenProgram,\n        });\n\n        return [\n            createMintAccountInstruction,\n            initializeMintInstruction,\n            createTokenPoolInstruction,\n        ];\n    }\n\n    /**\n     * Enable compression for an existing SPL mint, creating an omnibus account.\n     * For new mints, use `CompressedTokenProgram.createMint`.\n     */\n    static async createTokenPool(\n        params: RegisterMintParams,\n    ): Promise<TransactionInstruction> {\n        const { mint, feePayer, tokenProgramId } = params;\n\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const tokenPoolPda = this.deriveTokenPoolPda(mint);\n\n        const keys = createTokenPoolAccountsLayout({\n            mint,\n            feePayer,\n            tokenPoolPda,\n            tokenProgram,\n            cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            systemProgram: SystemProgram.programId,\n        });\n\n        return new TransactionInstruction({\n            programId: this.programId,\n            keys,\n            data: CREATE_TOKEN_POOL_DISCRIMINATOR,\n        });\n    }\n\n    /**\n     * Construct mintTo instruction for compressed tokens\n     */\n    static async mintTo(params: MintToParams): Promise<TransactionInstruction> {\n        const systemKeys = defaultStaticAccountsStruct();\n\n        const {\n            mint,\n            feePayer,\n            authority,\n            merkleTree,\n            toPubkey,\n            amount,\n            tokenProgramId,\n        } = params;\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const tokenPoolPda = this.deriveTokenPoolPda(mint);\n\n        const amounts = toArray<BN | number>(amount).map(amount => bn(amount));\n\n        const toPubkeys = toArray(toPubkey);\n\n        if (amounts.length !== toPubkeys.length) {\n            throw new Error(\n                'Amount and toPubkey arrays must have the same length',\n            );\n        }\n\n        const keys = mintToAccountsLayout({\n            mint,\n            feePayer,\n            authority,\n            cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            tokenProgram,\n            tokenPoolPda,\n            lightSystemProgram: LightSystemProgram.programId,\n            registeredProgramPda: systemKeys.registeredProgramPda,\n            noopProgram: systemKeys.noopProgram,\n            accountCompressionAuthority: systemKeys.accountCompressionAuthority,\n            accountCompressionProgram: systemKeys.accountCompressionProgram,\n            merkleTree: merkleTree ?? defaultTestStateTreeAccounts().merkleTree,\n            selfProgram: this.programId,\n            systemProgram: SystemProgram.programId,\n            solPoolPda: null, // TODO: add lamports support\n        });\n\n        const data = encodeMintToInstructionData({\n            recipients: toPubkeys,\n            amounts,\n            lamports: null,\n        });\n\n        return new TransactionInstruction({\n            programId: this.programId,\n            keys,\n            data,\n        });\n    }\n\n    /**\n     * Mint tokens from registered SPL mint account to a compressed account\n     */\n    static async approveAndMintTo(params: ApproveAndMintToParams) {\n        const {\n            mint,\n            feePayer,\n            authorityTokenAccount,\n            authority,\n            merkleTree,\n            toPubkey,\n            tokenProgramId,\n        } = params;\n\n        const amount: bigint = BigInt(params.amount.toString());\n\n        /// 1. Mint to existing ATA of mintAuthority.\n        const splMintToInstruction = createMintToInstruction(\n            mint,\n            authorityTokenAccount,\n            authority,\n            amount,\n            [],\n            tokenProgramId,\n        );\n\n        /// 2. Compress from mint authority ATA to recipient compressed account\n        const compressInstruction = await this.compress({\n            payer: feePayer,\n            owner: authority,\n            source: authorityTokenAccount,\n            toAddress: toPubkey,\n            mint,\n            amount: params.amount,\n            outputStateTree: merkleTree,\n            tokenProgramId,\n        });\n\n        return [splMintToInstruction, compressInstruction];\n    }\n    /**\n     * Construct transfer instruction for compressed tokens\n     */\n    static async transfer(\n        params: TransferParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            payer,\n            inputCompressedTokenAccounts,\n            recentInputStateRootIndices,\n            recentValidityProof,\n            amount,\n            outputStateTrees,\n            toAddress,\n        } = params;\n\n        const tokenTransferOutputs: TokenTransferOutputData[] =\n            createTransferOutputState(\n                inputCompressedTokenAccounts,\n                toAddress,\n                amount,\n            );\n        const {\n            inputTokenDataWithContext,\n            packedOutputTokenData,\n            remainingAccountMetas,\n        } = packCompressedTokenAccounts({\n            inputCompressedTokenAccounts,\n            outputStateTrees,\n            rootIndices: recentInputStateRootIndices,\n            tokenTransferOutputs,\n        });\n\n        const { mint, currentOwner } = parseTokenData(\n            inputCompressedTokenAccounts,\n        );\n\n        const rawData: CompressedTokenInstructionDataTransfer = {\n            proof: recentValidityProof,\n            mint,\n            delegatedTransfer: null, // TODO: implement\n            inputTokenDataWithContext,\n            outputCompressedAccounts: packedOutputTokenData,\n            compressOrDecompressAmount: null,\n            isCompress: false,\n            cpiContext: null,\n            lamportsChangeAccountMerkleTreeIndex: null,\n        };\n        const data = encodeTransferInstructionData(rawData);\n\n        const {\n            accountCompressionAuthority,\n            noopProgram,\n            registeredProgramPda,\n            accountCompressionProgram,\n        } = defaultStaticAccountsStruct();\n        const keys = transferAccountsLayout({\n            feePayer: payer,\n            authority: currentOwner,\n            cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            lightSystemProgram: LightSystemProgram.programId,\n            registeredProgramPda: registeredProgramPda,\n            noopProgram: noopProgram,\n            accountCompressionAuthority: accountCompressionAuthority,\n            accountCompressionProgram: accountCompressionProgram,\n            selfProgram: this.programId,\n            tokenPoolPda: undefined,\n            compressOrDecompressTokenAccount: undefined,\n            tokenProgram: undefined,\n            systemProgram: SystemProgram.programId,\n        });\n\n        keys.push(...remainingAccountMetas);\n\n        return new TransactionInstruction({\n            programId: this.programId,\n            keys,\n            data,\n        });\n    }\n\n    /**\n     * Create lookup table instructions for the token program's default accounts.\n     */\n    static async createTokenProgramLookupTable(\n        params: CreateTokenProgramLookupTableParams,\n    ) {\n        const { authority, mints, recentSlot, payer, remainingAccounts } =\n            params;\n\n        const [createInstruction, lookupTableAddress] =\n            AddressLookupTableProgram.createLookupTable({\n                authority,\n                payer: authority,\n                recentSlot,\n            });\n\n        let optionalMintKeys: PublicKey[] = [];\n        if (mints) {\n            optionalMintKeys = [\n                ...mints,\n                ...mints.map(mint => this.deriveTokenPoolPda(mint)),\n            ];\n        }\n\n        const extendInstruction = AddressLookupTableProgram.extendLookupTable({\n            payer,\n            authority,\n            lookupTable: lookupTableAddress,\n            addresses: [\n                this.deriveCpiAuthorityPda,\n                LightSystemProgram.programId,\n                defaultStaticAccountsStruct().registeredProgramPda,\n                defaultStaticAccountsStruct().noopProgram,\n                defaultStaticAccountsStruct().accountCompressionAuthority,\n                defaultStaticAccountsStruct().accountCompressionProgram,\n                defaultTestStateTreeAccounts().merkleTree,\n                defaultTestStateTreeAccounts().nullifierQueue,\n                defaultTestStateTreeAccounts().addressTree,\n                defaultTestStateTreeAccounts().addressQueue,\n                this.programId,\n                TOKEN_PROGRAM_ID,\n                TOKEN_2022_PROGRAM_ID,\n                authority,\n                ...optionalMintKeys,\n                ...(remainingAccounts ?? []),\n            ],\n        });\n\n        return {\n            instructions: [createInstruction, extendInstruction],\n            address: lookupTableAddress,\n        };\n    }\n\n    /**\n     * Create compress instruction\n     * @returns compressInstruction\n     */\n    static async compress(\n        params: CompressParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            payer,\n            owner,\n            source,\n            toAddress,\n            mint,\n            outputStateTree,\n            tokenProgramId,\n        } = params;\n\n        if (Array.isArray(params.amount) !== Array.isArray(params.toAddress)) {\n            throw new Error(\n                'Both amount and toAddress must be arrays or both must be single values',\n            );\n        }\n\n        let tokenTransferOutputs: TokenTransferOutputData[];\n\n        if (Array.isArray(params.amount) && Array.isArray(params.toAddress)) {\n            if (params.amount.length !== params.toAddress.length) {\n                throw new Error(\n                    'Amount and toAddress arrays must have the same length',\n                );\n            }\n            tokenTransferOutputs = params.amount.map((amt, index) => {\n                const amount = bn(amt);\n                return {\n                    owner: (params.toAddress as PublicKey[])[index],\n                    amount,\n                    lamports: bn(0),\n                    tlv: null,\n                };\n            });\n        } else {\n            tokenTransferOutputs = [\n                {\n                    owner: toAddress as PublicKey,\n                    amount: bn(params.amount as number | BN),\n                    lamports: bn(0),\n                    tlv: null,\n                },\n            ];\n        }\n\n        const {\n            inputTokenDataWithContext,\n            packedOutputTokenData,\n            remainingAccountMetas,\n        } = packCompressedTokenAccounts({\n            inputCompressedTokenAccounts: [],\n            outputStateTrees: outputStateTree,\n            rootIndices: [],\n            tokenTransferOutputs,\n        });\n\n        const rawData: CompressedTokenInstructionDataTransfer = {\n            proof: null,\n            mint,\n            delegatedTransfer: null, // TODO: implement\n            inputTokenDataWithContext,\n            outputCompressedAccounts: packedOutputTokenData,\n            compressOrDecompressAmount: Array.isArray(params.amount)\n                ? params.amount\n                      .map(amt => new BN(amt))\n                      .reduce((sum, amt) => sum.add(amt), new BN(0))\n                : new BN(params.amount),\n            isCompress: true,\n            cpiContext: null,\n            lamportsChangeAccountMerkleTreeIndex: null,\n        };\n        const data = encodeTransferInstructionData(rawData);\n\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const keys = transferAccountsLayout({\n            ...defaultStaticAccountsStruct(),\n            feePayer: payer,\n            authority: owner,\n            cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            lightSystemProgram: LightSystemProgram.programId,\n            selfProgram: this.programId,\n            systemProgram: SystemProgram.programId,\n            tokenPoolPda: this.deriveTokenPoolPda(mint),\n            compressOrDecompressTokenAccount: source,\n            tokenProgram,\n        });\n\n        keys.push(...remainingAccountMetas);\n\n        return new TransactionInstruction({\n            programId: this.programId,\n            keys,\n            data,\n        });\n    }\n\n    /**\n     * Construct decompress instruction\n     */\n    static async decompress(\n        params: DecompressParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            payer,\n            inputCompressedTokenAccounts,\n            toAddress,\n            outputStateTree,\n            recentValidityProof,\n            recentInputStateRootIndices,\n            tokenProgramId,\n        } = params;\n        const amount = bn(params.amount);\n\n        const tokenTransferOutputs = createDecompressOutputState(\n            inputCompressedTokenAccounts,\n            amount,\n        );\n\n        /// Pack\n        const {\n            inputTokenDataWithContext,\n            packedOutputTokenData,\n            remainingAccountMetas,\n        } = packCompressedTokenAccounts({\n            inputCompressedTokenAccounts,\n            outputStateTrees: outputStateTree,\n            rootIndices: recentInputStateRootIndices,\n            tokenTransferOutputs: tokenTransferOutputs,\n        });\n\n        const { mint, currentOwner } = parseTokenData(\n            inputCompressedTokenAccounts,\n        );\n\n        const rawData: CompressedTokenInstructionDataTransfer = {\n            proof: recentValidityProof,\n            mint,\n            delegatedTransfer: null, // TODO: implement\n            inputTokenDataWithContext,\n            outputCompressedAccounts: packedOutputTokenData,\n            compressOrDecompressAmount: amount,\n            isCompress: false,\n            cpiContext: null,\n            lamportsChangeAccountMerkleTreeIndex: null,\n        };\n        const data = encodeTransferInstructionData(rawData);\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n        const {\n            accountCompressionAuthority,\n            noopProgram,\n            registeredProgramPda,\n            accountCompressionProgram,\n        } = defaultStaticAccountsStruct();\n\n        const keys = transferAccountsLayout({\n            feePayer: payer,\n            authority: currentOwner,\n            cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            lightSystemProgram: LightSystemProgram.programId,\n            registeredProgramPda: registeredProgramPda,\n            noopProgram: noopProgram,\n            accountCompressionAuthority: accountCompressionAuthority,\n            accountCompressionProgram: accountCompressionProgram,\n            selfProgram: this.programId,\n            tokenPoolPda: this.deriveTokenPoolPda(mint),\n            compressOrDecompressTokenAccount: toAddress,\n            tokenProgram,\n            systemProgram: SystemProgram.programId,\n        });\n\n        keys.push(...remainingAccountMetas);\n\n        return new TransactionInstruction({\n            programId: this.programId,\n            keys,\n            data,\n        });\n    }\n\n    static async mergeTokenAccounts(\n        params: MergeTokenAccountsParams,\n    ): Promise<TransactionInstruction[]> {\n        const {\n            payer,\n            owner,\n            inputCompressedTokenAccounts,\n            outputStateTree,\n            recentValidityProof,\n            recentInputStateRootIndices,\n        } = params;\n\n        if (inputCompressedTokenAccounts.length > 3) {\n            throw new Error('Cannot merge more than 3 token accounts at once');\n        }\n\n        const ix = await this.transfer({\n            payer,\n            inputCompressedTokenAccounts,\n            toAddress: owner,\n            amount: inputCompressedTokenAccounts.reduce(\n                (sum, account) => sum.add(account.parsed.amount),\n                new BN(0),\n            ),\n            outputStateTrees: outputStateTree,\n            recentInputStateRootIndices,\n            recentValidityProof,\n        });\n\n        return [ix];\n    }\n\n    static async compressSplTokenAccount(\n        params: CompressSplTokenAccountParams,\n    ): Promise<TransactionInstruction> {\n        const {\n            feePayer,\n            authority,\n            tokenAccount,\n            mint,\n            remainingAmount,\n            outputStateTree,\n            tokenProgramId,\n        } = params;\n        const tokenProgram = tokenProgramId ?? TOKEN_PROGRAM_ID;\n\n        const remainingAccountMetas: AccountMeta[] = [\n            {\n                pubkey: outputStateTree,\n                isSigner: false,\n                isWritable: true,\n            },\n        ];\n\n        const data = encodeCompressSplTokenAccountInstructionData({\n            owner: authority,\n            remainingAmount: remainingAmount ?? null,\n            cpiContext: null,\n        });\n        const {\n            accountCompressionAuthority,\n            noopProgram,\n            registeredProgramPda,\n            accountCompressionProgram,\n        } = defaultStaticAccountsStruct();\n        const keys = transferAccountsLayout({\n            feePayer,\n            authority,\n            cpiAuthorityPda: this.deriveCpiAuthorityPda,\n            lightSystemProgram: LightSystemProgram.programId,\n            registeredProgramPda: registeredProgramPda,\n            noopProgram: noopProgram,\n            accountCompressionAuthority: accountCompressionAuthority,\n            accountCompressionProgram: accountCompressionProgram,\n            selfProgram: this.programId,\n            tokenPoolPda: this.deriveTokenPoolPda(mint),\n            compressOrDecompressTokenAccount: tokenAccount,\n            tokenProgram,\n            systemProgram: SystemProgram.programId,\n        });\n\n        keys.push(...remainingAccountMetas);\n\n        return new TransactionInstruction({\n            programId: this.programId,\n            keys,\n            data,\n        });\n    }\n\n    static async get_mint_program_id(\n        mint: PublicKey,\n        connection: Connection,\n    ): Promise<PublicKey | undefined> {\n        return (await connection.getAccountInfo(mint))?.owner;\n    }\n}\n","import { bn, ParsedTokenAccount } from '@lightprotocol/stateless.js';\n\nimport BN from 'bn.js';\n\nexport const ERROR_NO_ACCOUNTS_FOUND =\n    'Could not find accounts to select for transfer.';\n\n/**\n * Selects the minimum number of compressed token accounts required for a transfer, up to a specified maximum.\n *\n * @param {ParsedTokenAccount[]} accounts - Token accounts to choose from.\n * @param {BN} transferAmount - Amount to transfer.\n * @param {number} [maxInputs=4] - Max accounts to select. Default is 4.\n * @returns {[\n *   selectedAccounts: ParsedTokenAccount[],\n *   total: BN,\n *   totalLamports: BN | null,\n *   maxPossibleAmount: BN\n * ]} - Returns:\n *   - selectedAccounts: Accounts chosen for transfer.\n *   - total: Total amount from selected accounts.\n *   - totalLamports: Total lamports from selected accounts.\n *   - maxPossibleAmount: Max transferable amount given maxInputs.\n *\n * @example\n * const accounts = [\n *   { parsed: { amount: new BN(100) }, compressedAccount: { lamports: new BN(10) } },\n *   { parsed: { amount: new BN(50) }, compressedAccount: { lamports: new BN(5) } },\n *   { parsed: { amount: new BN(25) }, compressedAccount: { lamports: new BN(2) } },\n * ];\n * const transferAmount = new BN(75);\n * const maxInputs = 2;\n *\n * const [selectedAccounts, total, totalLamports, maxPossibleAmount] =\n *   selectMinCompressedTokenAccountsForTransfer(accounts, transferAmount, maxInputs);\n *\n * console.log(selectedAccounts.length); // 2\n * console.log(total.toString()); // '150'\n * console.log(totalLamports!.toString()); // '15'\n */\nexport function selectMinCompressedTokenAccountsForTransfer(\n    accounts: ParsedTokenAccount[],\n    transferAmount: BN,\n    maxInputs: number = 4,\n): [\n    selectedAccounts: ParsedTokenAccount[],\n    total: BN,\n    totalLamports: BN | null,\n    maxPossibleAmount: BN,\n] {\n    const [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports,\n        maxPossibleAmount,\n    ] = selectMinCompressedTokenAccountsForTransferOrPartial(\n        accounts,\n        transferAmount,\n        maxInputs,\n    );\n\n    if (accumulatedAmount.lt(bn(transferAmount))) {\n        const totalBalance = accounts.reduce(\n            (acc, account) => acc.add(account.parsed.amount),\n            bn(0),\n        );\n        if (selectedAccounts.length >= maxInputs) {\n            throw new Error(\n                `Account limit exceeded: max ${maxPossibleAmount.toString()} (${maxInputs} accounts) per transaction. Total balance: ${totalBalance.toString()} (${accounts.length} accounts). Consider multiple transfers to spend full balance.`,\n            );\n        } else {\n            throw new Error(\n                `Insufficient balance for transfer. Required: ${transferAmount.toString()}, available: ${totalBalance.toString()}.`,\n            );\n        }\n    }\n\n    if (selectedAccounts.length === 0) {\n        throw new Error(ERROR_NO_ACCOUNTS_FOUND);\n    }\n\n    return [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports,\n        maxPossibleAmount,\n    ];\n}\n\n/**\n * Executes {@link selectMinCompressedTokenAccountsForTransfer} strategy,\n * returns partial amounts if insufficient accounts are found instead of\n * throwing an error.\n */\nexport function selectMinCompressedTokenAccountsForTransferOrPartial(\n    accounts: ParsedTokenAccount[],\n    transferAmount: BN,\n    maxInputs: number = 4,\n): [\n    selectedAccounts: ParsedTokenAccount[],\n    total: BN,\n    totalLamports: BN | null,\n    maxPossibleAmount: BN,\n] {\n    if (accounts.length === 0) {\n        throw new Error(ERROR_NO_ACCOUNTS_FOUND);\n    }\n\n    let accumulatedAmount = bn(0);\n    let accumulatedLamports = bn(0);\n    let maxPossibleAmount = bn(0);\n\n    const selectedAccounts: ParsedTokenAccount[] = [];\n\n    accounts.sort((a, b) => b.parsed.amount.cmp(a.parsed.amount));\n\n    for (const account of accounts) {\n        if (selectedAccounts.length >= maxInputs) break;\n        if (accumulatedAmount.gte(bn(transferAmount))) break;\n\n        if (\n            !account.parsed.amount.isZero() ||\n            !account.compressedAccount.lamports.isZero()\n        ) {\n            accumulatedAmount = accumulatedAmount.add(account.parsed.amount);\n            accumulatedLamports = accumulatedLamports.add(\n                account.compressedAccount.lamports,\n            );\n            selectedAccounts.push(account);\n        }\n    }\n\n    // Max, considering maxInputs\n    maxPossibleAmount = accounts\n        .slice(0, maxInputs)\n        .reduce((total, account) => total.add(account.parsed.amount), bn(0));\n\n    if (accumulatedAmount.lt(bn(transferAmount))) {\n        console.log(\n            `Insufficient balance for transfer. Requested: ${transferAmount.toString()}, Returns max available: ${maxPossibleAmount.toString()}.`,\n        );\n    }\n\n    if (selectedAccounts.length === 0) {\n        throw new Error(ERROR_NO_ACCOUNTS_FOUND);\n    }\n\n    return [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports,\n        maxPossibleAmount,\n    ];\n}\n\n/**\n * Selects compressed token accounts for a transfer, ensuring one extra account\n * if possible, up to maxInputs.\n *\n * 1. Sorts accounts by amount (desc)\n * 2. Selects accounts until transfer amount is met or maxInputs is reached,\n *    attempting to add one extra account if possible.\n *\n * @param {ParsedTokenAccount[]} accounts - The list of token accounts to select from.\n * @param {BN} transferAmount - The token amount to be transferred.\n * @param {number} [maxInputs=4] - The maximum number of accounts to select. Default: 4.\n * @returns {[\n *   selectedAccounts: ParsedTokenAccount[],\n *   total: BN,\n *   totalLamports: BN | null,\n *   maxPossibleAmount: BN\n * ]} - An array containing:\n *   - selectedAccounts: The accounts selected for the transfer.\n *   - total: The total amount accumulated from the selected accounts.\n *   - totalLamports: The total lamports accumulated from the selected accounts.\n *   - maxPossibleAmount: The maximum possible amount that can be transferred considering maxInputs.\n *\n * @example\n * const accounts = [\n *   { parsed: { amount: new BN(100) }, compressedAccount: { lamports: new BN(10) } },\n *   { parsed: { amount: new BN(50) }, compressedAccount: { lamports: new BN(5) } },\n *   { parsed: { amount: new BN(25) }, compressedAccount: { lamports: new BN(2) } },\n * ];\n * const transferAmount = new BN(75);\n * const maxInputs = 2;\n *\n * const [selectedAccounts, total, totalLamports, maxPossibleAmount] =\n *   selectSmartCompressedTokenAccountsForTransfer(accounts, transferAmount, maxInputs);\n *\n * console.log(selectedAccounts.length); // 2\n * console.log(total.toString()); // '150'\n * console.log(totalLamports!.toString()); // '15'\n * console.log(maxPossibleAmount.toString()); // '150'\n */\nexport function selectSmartCompressedTokenAccountsForTransfer(\n    accounts: ParsedTokenAccount[],\n    transferAmount: BN,\n    maxInputs: number = 4,\n): [\n    selectedAccounts: ParsedTokenAccount[],\n    total: BN,\n    totalLamports: BN | null,\n    maxPossibleAmount: BN,\n] {\n    const [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports,\n        maxPossibleAmount,\n    ] = selectSmartCompressedTokenAccountsForTransferOrPartial(\n        accounts,\n        transferAmount,\n        maxInputs,\n    );\n\n    if (accumulatedAmount.lt(bn(transferAmount))) {\n        const totalBalance = accounts.reduce(\n            (acc, account) => acc.add(account.parsed.amount),\n            bn(0),\n        );\n        if (selectedAccounts.length >= maxInputs) {\n            throw new Error(\n                `Account limit exceeded: max ${maxPossibleAmount.toString()} (${maxInputs} accounts) per transaction. Total balance: ${totalBalance.toString()} (${accounts.length} accounts). Consider multiple transfers to spend full balance.`,\n            );\n        } else {\n            throw new Error(\n                `Insufficient balance. Required: ${transferAmount.toString()}, available: ${totalBalance.toString()}.`,\n            );\n        }\n    }\n\n    if (selectedAccounts.length === 0) {\n        throw new Error(ERROR_NO_ACCOUNTS_FOUND);\n    }\n\n    return [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports,\n        maxPossibleAmount,\n    ];\n}\n\n/**\n * Executes {@link selectMinCompressedTokenAccountsForTransfer} strategy,\n * returns partial amounts if insufficient accounts are found instead of\n * throwing an error.\n */\nexport function selectSmartCompressedTokenAccountsForTransferOrPartial(\n    accounts: ParsedTokenAccount[],\n    transferAmount: BN,\n    maxInputs: number = 4,\n): [\n    selectedAccounts: ParsedTokenAccount[],\n    total: BN,\n    totalLamports: BN | null,\n    maxPossibleAmount: BN,\n] {\n    if (accounts.length === 0) {\n        throw new Error(ERROR_NO_ACCOUNTS_FOUND);\n    }\n\n    let accumulatedAmount = bn(0);\n    let accumulatedLamports = bn(0);\n\n    const selectedAccounts: ParsedTokenAccount[] = [];\n\n    // we can ignore zero value accounts.\n    const nonZeroAccounts = accounts.filter(\n        account =>\n            !account.parsed.amount.isZero() ||\n            !account.compressedAccount.lamports.isZero(),\n    );\n\n    nonZeroAccounts.sort((a, b) => b.parsed.amount.cmp(a.parsed.amount));\n\n    for (const account of nonZeroAccounts) {\n        if (selectedAccounts.length >= maxInputs) break;\n        accumulatedAmount = accumulatedAmount.add(account.parsed.amount);\n        accumulatedLamports = accumulatedLamports.add(\n            account.compressedAccount.lamports,\n        );\n        selectedAccounts.push(account);\n\n        if (accumulatedAmount.gte(bn(transferAmount))) {\n            // Select smallest additional account if maxInputs not reached\n            const remainingAccounts = nonZeroAccounts.slice(\n                selectedAccounts.length,\n            );\n            if (remainingAccounts.length > 0) {\n                const smallestAccount = remainingAccounts.reduce((min, acc) =>\n                    acc.parsed.amount.lt(min.parsed.amount) ? acc : min,\n                );\n                if (selectedAccounts.length < maxInputs) {\n                    selectedAccounts.push(smallestAccount);\n                    accumulatedAmount = accumulatedAmount.add(\n                        smallestAccount.parsed.amount,\n                    );\n                    accumulatedLamports = accumulatedLamports.add(\n                        smallestAccount.compressedAccount.lamports,\n                    );\n                }\n            }\n            break;\n        }\n    }\n\n    const maxPossibleAmount = nonZeroAccounts\n        .slice(0, maxInputs)\n        .reduce((max, account) => max.add(account.parsed.amount), bn(0));\n\n    if (selectedAccounts.length === 0) {\n        throw new Error(ERROR_NO_ACCOUNTS_FOUND);\n    }\n\n    return [\n        selectedAccounts,\n        accumulatedAmount,\n        accumulatedLamports,\n        maxPossibleAmount,\n    ];\n}\n","export type LightCompressedToken = {\n    version: '1.2.0';\n    name: 'light_compressed_token';\n    instructions: [\n        {\n            name: 'createTokenPool';\n            docs: [\n                'This instruction creates a token pool for a given mint. Every spl mint',\n                'can have one token pool. When a token is compressed the tokens are',\n                'transferrred to the token pool, and their compressed equivalent is',\n                'minted into a Merkle tree.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [];\n        },\n        {\n            name: 'addTokenPool';\n            docs: [\n                'This instruction creates an additional token pool for a given mint.',\n                'The maximum number of token pools per mint is 5.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'existingTokenPoolPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'tokenPoolIndex';\n                    type: 'u8';\n                },\n            ];\n        },\n        {\n            name: 'mintTo';\n            docs: [\n                'Mints tokens from an spl token mint to a list of compressed accounts.',\n                'Minted tokens are transferred to a pool account owned by the compressed',\n                'token program. The instruction creates one compressed output account for',\n                'every amount and pubkey input pair. A constant amount of lamports can be',\n                'transferred to each output account to enable. A use case to add lamports',\n                'to a compressed token account is to prevent spam. This is the only way',\n                'to add lamports to a compressed token account.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['programs'];\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'merkleTree';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'solPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n            ];\n            args: [\n                {\n                    name: 'publicKeys';\n                    type: {\n                        vec: 'publicKey';\n                    };\n                },\n                {\n                    name: 'amounts';\n                    type: {\n                        vec: 'u64';\n                    };\n                },\n                {\n                    name: 'lamports';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n            ];\n        },\n        {\n            name: 'compressSplTokenAccount';\n            docs: [\n                'Compresses the balance of an spl token account sub an optional remaining',\n                'amount. This instruction does not close the spl token account. To close',\n                'the account bundle a close spl account instruction in your transaction.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'owner';\n                    type: 'publicKey';\n                },\n                {\n                    name: 'remainingAmount';\n                    type: {\n                        option: 'u64';\n                    };\n                },\n                {\n                    name: 'cpiContext';\n                    type: {\n                        option: {\n                            defined: 'CompressedCpiContext';\n                        };\n                    };\n                },\n            ];\n        },\n        {\n            name: 'transfer';\n            docs: [\n                'Transfers compressed tokens from one account to another. All accounts',\n                'must be of the same mint. Additional spl tokens can be compressed or',\n                'decompressed. In one transaction only compression or decompression is',\n                'possible. Lamports can be transferred alongside tokens. If output token',\n                'accounts specify less lamports than inputs the remaining lamports are',\n                'transferred to an output compressed account. Signer must be owner or',\n                'delegate. If a delegated token account is transferred the delegate is',\n                'not preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'approve';\n            docs: [\n                'Delegates an amount to a delegate. A compressed token account is either',\n                'completely delegated or not. Prior delegates are not preserved. Cannot',\n                'be called by a delegate.',\n                'The instruction creates two output accounts:',\n                '1. one account with delegated amount',\n                '2. one account with remaining(change) amount',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'revoke';\n            docs: [\n                'Revokes a delegation. The instruction merges all inputs into one output',\n                'account. Cannot be called by a delegate. Delegates are not preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'freeze';\n            docs: [\n                'Freezes compressed token accounts. Inputs must not be frozen. Creates as',\n                'many outputs as inputs. Balances and delegates are preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['that this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'thaw';\n            docs: [\n                'Thaws frozen compressed token accounts. Inputs must be frozen. Creates',\n                'as many outputs as inputs. Balances and delegates are preserved.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['that this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'burn';\n            docs: [\n                'Burns compressed tokens and spl tokens from the pool account. Delegates',\n                'can burn tokens. The output compressed token account remains delegated.',\n                'Creates one output compressed token account.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'mint';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs';\n                    type: 'bytes';\n                },\n            ];\n        },\n        {\n            name: 'stubIdlBuild';\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ];\n            accounts: [\n                {\n                    name: 'feePayer';\n                    isMut: true;\n                    isSigner: true;\n                    docs: ['UNCHECKED: only pays fees.'];\n                },\n                {\n                    name: 'authority';\n                    isMut: false;\n                    isSigner: true;\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ];\n                },\n                {\n                    name: 'cpiAuthorityPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'lightSystemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'registeredProgramPda';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'noopProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionAuthority';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'accountCompressionProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n                {\n                    name: 'selfProgram';\n                    isMut: false;\n                    isSigner: false;\n                    docs: ['this program is the signer of the cpi.'];\n                },\n                {\n                    name: 'tokenPoolPda';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount';\n                    isMut: true;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'tokenProgram';\n                    isMut: false;\n                    isSigner: false;\n                    isOptional: true;\n                },\n                {\n                    name: 'systemProgram';\n                    isMut: false;\n                    isSigner: false;\n                },\n            ];\n            args: [\n                {\n                    name: 'inputs1';\n                    type: {\n                        defined: 'CompressedTokenInstructionDataTransfer';\n                    };\n                },\n                {\n                    name: 'inputs2';\n                    type: {\n                        defined: 'TokenData';\n                    };\n                },\n            ];\n        },\n    ];\n    types: [\n        {\n            name: 'AccountState';\n            type: {\n                kind: 'enum';\n                variants: [\n                    {\n                        name: 'Initialized';\n                    },\n                    {\n                        name: 'Frozen';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccount';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'lamports';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'address';\n                        type: {\n                            option: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedAccountData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'discriminator';\n                        type: {\n                            array: ['u8', 8];\n                        };\n                    },\n                    {\n                        name: 'data';\n                        type: 'bytes';\n                    },\n                    {\n                        name: 'dataHash';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedCpiContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'setContext';\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'firstSetContext';\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ];\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContextAccountIndex';\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ];\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedProof';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'a';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'b';\n                        type: {\n                            array: ['u8', 64];\n                        };\n                    },\n                    {\n                        name: 'c';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'CompressedTokenInstructionDataTransfer';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'mint';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'delegatedTransfer';\n                        docs: [\n                            'Is required if the signer is delegate,',\n                            '-> delegate is authority account,',\n                            'owner = Some(owner) is the owner of the token account.',\n                        ];\n                        type: {\n                            option: {\n                                defined: 'DelegatedTransfer';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputTokenDataWithContext';\n                        type: {\n                            vec: {\n                                defined: 'InputTokenDataWithContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'PackedTokenTransferOutputData';\n                            };\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressAmount';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'lamportsChangeAccountMerkleTreeIndex';\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'DelegatedTransfer';\n            docs: [\n                'Struct to provide the owner when the delegate is signer of the transaction.',\n            ];\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'delegateChangeAccountIndex';\n                        docs: [\n                            'Index of change compressed account in output compressed accounts. In',\n                            \"case that the delegate didn't spend the complete delegated compressed\",\n                            'account balance the change compressed account will be delegated to her',\n                            'as well.',\n                        ];\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InputTokenDataWithContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'amount';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'delegateIndex';\n                        type: {\n                            option: 'u8';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        type: 'u16';\n                    },\n                    {\n                        name: 'lamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvoke';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'InstructionDataInvokeCpi';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'proof';\n                        type: {\n                            option: {\n                                defined: 'CompressedProof';\n                            };\n                        };\n                    },\n                    {\n                        name: 'newAddressParams';\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked';\n                            };\n                        };\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext';\n                        type: {\n                            vec: {\n                                defined: 'PackedCompressedAccountWithMerkleContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'cpiContext';\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'MerkleTreeSequenceNumber';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'pubkey';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'seq';\n                        type: 'u64';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'NewAddressParamsPacked';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'seed';\n                        type: {\n                            array: ['u8', 32];\n                        };\n                    },\n                    {\n                        name: 'addressQueueAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex';\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'compressedAccount';\n                        type: {\n                            defined: 'CompressedAccount';\n                        };\n                    },\n                    {\n                        name: 'merkleContext';\n                        type: {\n                            defined: 'PackedMerkleContext';\n                        };\n                    },\n                    {\n                        name: 'rootIndex';\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ];\n                        type: 'u16';\n                    },\n                    {\n                        name: 'readOnly';\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ];\n                        type: 'bool';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedMerkleContext';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'leafIndex';\n                        type: 'u32';\n                    },\n                    {\n                        name: 'queueIndex';\n                        type: {\n                            option: {\n                                defined: 'QueueIndex';\n                            };\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PackedTokenTransferOutputData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'owner';\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'amount';\n                        type: 'u64';\n                    },\n                    {\n                        name: 'lamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'merkleTreeIndex';\n                        type: 'u8';\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'PublicTransactionEvent';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes';\n                        type: {\n                            vec: {\n                                array: ['u8', 32];\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputCompressedAccounts';\n                        type: {\n                            vec: {\n                                defined: 'OutputCompressedAccountWithPackedContext';\n                            };\n                        };\n                    },\n                    {\n                        name: 'outputLeafIndices';\n                        type: {\n                            vec: 'u32';\n                        };\n                    },\n                    {\n                        name: 'sequenceNumbers';\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber';\n                            };\n                        };\n                    },\n                    {\n                        name: 'relayFee';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'isCompress';\n                        type: 'bool';\n                    },\n                    {\n                        name: 'compressOrDecompressLamports';\n                        type: {\n                            option: 'u64';\n                        };\n                    },\n                    {\n                        name: 'pubkeyArray';\n                        type: {\n                            vec: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'message';\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n        {\n            name: 'QueueIndex';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'queueId';\n                        docs: ['Id of queue in queue account.'];\n                        type: 'u8';\n                    },\n                    {\n                        name: 'index';\n                        docs: ['Index of compressed account hash in queue.'];\n                        type: 'u16';\n                    },\n                ];\n            };\n        },\n        {\n            name: 'TokenData';\n            type: {\n                kind: 'struct';\n                fields: [\n                    {\n                        name: 'mint';\n                        docs: ['The mint associated with this account'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'owner';\n                        docs: ['The owner of this account.'];\n                        type: 'publicKey';\n                    },\n                    {\n                        name: 'amount';\n                        docs: ['The amount of tokens this account holds.'];\n                        type: 'u64';\n                    },\n                    {\n                        name: 'delegate';\n                        docs: [\n                            'If `delegate` is `Some` then `delegated_amount` represents',\n                            'the amount authorized by the delegate',\n                        ];\n                        type: {\n                            option: 'publicKey';\n                        };\n                    },\n                    {\n                        name: 'state';\n                        docs: [\"The account's state\"];\n                        type: {\n                            defined: 'AccountState';\n                        };\n                    },\n                    {\n                        name: 'tlv';\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ];\n                        type: {\n                            option: 'bytes';\n                        };\n                    },\n                ];\n            };\n        },\n    ];\n    errors: [\n        {\n            code: 6000;\n            name: 'PublicKeyAmountMissmatch';\n            msg: 'public keys and amounts must be of same length';\n        },\n        {\n            code: 6001;\n            name: 'ComputeInputSumFailed';\n            msg: 'ComputeInputSumFailed';\n        },\n        {\n            code: 6002;\n            name: 'ComputeOutputSumFailed';\n            msg: 'ComputeOutputSumFailed';\n        },\n        {\n            code: 6003;\n            name: 'ComputeCompressSumFailed';\n            msg: 'ComputeCompressSumFailed';\n        },\n        {\n            code: 6004;\n            name: 'ComputeDecompressSumFailed';\n            msg: 'ComputeDecompressSumFailed';\n        },\n        {\n            code: 6005;\n            name: 'SumCheckFailed';\n            msg: 'SumCheckFailed';\n        },\n        {\n            code: 6006;\n            name: 'DecompressRecipientUndefinedForDecompress';\n            msg: 'DecompressRecipientUndefinedForDecompress';\n        },\n        {\n            code: 6007;\n            name: 'CompressedPdaUndefinedForDecompress';\n            msg: 'CompressedPdaUndefinedForDecompress';\n        },\n        {\n            code: 6008;\n            name: 'DeCompressAmountUndefinedForDecompress';\n            msg: 'DeCompressAmountUndefinedForDecompress';\n        },\n        {\n            code: 6009;\n            name: 'CompressedPdaUndefinedForCompress';\n            msg: 'CompressedPdaUndefinedForCompress';\n        },\n        {\n            code: 6010;\n            name: 'DeCompressAmountUndefinedForCompress';\n            msg: 'DeCompressAmountUndefinedForCompress';\n        },\n        {\n            code: 6011;\n            name: 'DelegateSignerCheckFailed';\n            msg: 'DelegateSignerCheckFailed';\n        },\n        {\n            code: 6012;\n            name: 'MintTooLarge';\n            msg: 'Minted amount greater than u64::MAX';\n        },\n        {\n            code: 6013;\n            name: 'SplTokenSupplyMismatch';\n            msg: 'SplTokenSupplyMismatch';\n        },\n        {\n            code: 6014;\n            name: 'HeapMemoryCheckFailed';\n            msg: 'HeapMemoryCheckFailed';\n        },\n        {\n            code: 6015;\n            name: 'InstructionNotCallable';\n            msg: 'The instruction is not callable';\n        },\n        {\n            code: 6016;\n            name: 'ArithmeticUnderflow';\n            msg: 'ArithmeticUnderflow';\n        },\n        {\n            code: 6017;\n            name: 'HashToFieldError';\n            msg: 'HashToFieldError';\n        },\n        {\n            code: 6018;\n            name: 'InvalidAuthorityMint';\n            msg: 'Expected the authority to be also a mint authority';\n        },\n        {\n            code: 6019;\n            name: 'InvalidFreezeAuthority';\n            msg: 'Provided authority is not the freeze authority';\n        },\n        {\n            code: 6020;\n            name: 'InvalidDelegateIndex';\n        },\n        {\n            code: 6021;\n            name: 'TokenPoolPdaUndefined';\n        },\n        {\n            code: 6022;\n            name: 'IsTokenPoolPda';\n            msg: 'Compress or decompress recipient is the same account as the token pool pda.';\n        },\n        {\n            code: 6023;\n            name: 'InvalidTokenPoolPda';\n        },\n        {\n            code: 6024;\n            name: 'NoInputTokenAccountsProvided';\n        },\n        {\n            code: 6025;\n            name: 'NoInputsProvided';\n        },\n        {\n            code: 6026;\n            name: 'MintHasNoFreezeAuthority';\n        },\n        {\n            code: 6027;\n            name: 'MintWithInvalidExtension';\n        },\n        {\n            code: 6028;\n            name: 'InsufficientTokenAccountBalance';\n            msg: 'The token account balance is less than the remaining amount.';\n        },\n        {\n            code: 6029;\n            name: 'InvalidTokenPoolBump';\n            msg: 'Max number of token pools reached.';\n        },\n        {\n            code: 6030;\n            name: 'FailedToDecompress';\n        },\n        {\n            code: 6031;\n            name: 'FailedToBurnSplTokensFromTokenPool';\n        },\n        {\n            code: 6032;\n            name: 'NoMatchingBumpFound';\n        },\n    ];\n};\nexport const IDL: LightCompressedToken = {\n    version: '1.2.0',\n    name: 'light_compressed_token',\n    instructions: [\n        {\n            name: 'createTokenPool',\n            docs: [\n                'This instruction creates a token pool for a given mint. Every spl mint',\n                'can have one token pool. When a token is compressed the tokens are',\n                'transferrred to the token pool, and their compressed equivalent is',\n                'minted into a Merkle tree.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [],\n        },\n        {\n            name: 'addTokenPool',\n            docs: [\n                'This instruction creates an additional token pool for a given mint.',\n                'The maximum number of token pools per mint is 5.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'existingTokenPoolPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'tokenPoolIndex',\n                    type: 'u8',\n                },\n            ],\n        },\n        {\n            name: 'mintTo',\n            docs: [\n                'Mints tokens from an spl token mint to a list of compressed accounts.',\n                'Minted tokens are transferred to a pool account owned by the compressed',\n                'token program. The instruction creates one compressed output account for',\n                'every amount and pubkey input pair. A constant amount of lamports can be',\n                'transferred to each output account to enable. A use case to add lamports',\n                'to a compressed token account is to prevent spam. This is the only way',\n                'to add lamports to a compressed token account.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['programs'],\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'merkleTree',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'solPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n            ],\n            args: [\n                {\n                    name: 'publicKeys',\n                    type: {\n                        vec: 'publicKey',\n                    },\n                },\n                {\n                    name: 'amounts',\n                    type: {\n                        vec: 'u64',\n                    },\n                },\n                {\n                    name: 'lamports',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n            ],\n        },\n        {\n            name: 'compressSplTokenAccount',\n            docs: [\n                'Compresses the balance of an spl token account sub an optional remaining',\n                'amount. This instruction does not close the spl token account. To close',\n                'the account bundle a close spl account instruction in your transaction.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'owner',\n                    type: 'publicKey',\n                },\n                {\n                    name: 'remainingAmount',\n                    type: {\n                        option: 'u64',\n                    },\n                },\n                {\n                    name: 'cpiContext',\n                    type: {\n                        option: {\n                            defined: 'CompressedCpiContext',\n                        },\n                    },\n                },\n            ],\n        },\n        {\n            name: 'transfer',\n            docs: [\n                'Transfers compressed tokens from one account to another. All accounts',\n                'must be of the same mint. Additional spl tokens can be compressed or',\n                'decompressed. In one transaction only compression or decompression is',\n                'possible. Lamports can be transferred alongside tokens. If output token',\n                'accounts specify less lamports than inputs the remaining lamports are',\n                'transferred to an output compressed account. Signer must be owner or',\n                'delegate. If a delegated token account is transferred the delegate is',\n                'not preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'approve',\n            docs: [\n                'Delegates an amount to a delegate. A compressed token account is either',\n                'completely delegated or not. Prior delegates are not preserved. Cannot',\n                'be called by a delegate.',\n                'The instruction creates two output accounts:',\n                '1. one account with delegated amount',\n                '2. one account with remaining(change) amount',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'revoke',\n            docs: [\n                'Revokes a delegation. The instruction merges all inputs into one output',\n                'account. Cannot be called by a delegate. Delegates are not preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'freeze',\n            docs: [\n                'Freezes compressed token accounts. Inputs must not be frozen. Creates as',\n                'many outputs as inputs. Balances and delegates are preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['that this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'thaw',\n            docs: [\n                'Thaws frozen compressed token accounts. Inputs must be frozen. Creates',\n                'as many outputs as inputs. Balances and delegates are preserved.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['that this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'burn',\n            docs: [\n                'Burns compressed tokens and spl tokens from the pool account. Delegates',\n                'can burn tokens. The output compressed token account remains delegated.',\n                'Creates one output compressed token account.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'mint',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs',\n                    type: 'bytes',\n                },\n            ],\n        },\n        {\n            name: 'stubIdlBuild',\n            docs: [\n                'This function is a stub to allow Anchor to include the input types in',\n                'the IDL. It should not be included in production builds nor be called in',\n                'practice.',\n            ],\n            accounts: [\n                {\n                    name: 'feePayer',\n                    isMut: true,\n                    isSigner: true,\n                    docs: ['UNCHECKED: only pays fees.'],\n                },\n                {\n                    name: 'authority',\n                    isMut: false,\n                    isSigner: true,\n                    docs: [\n                        'Authority is verified through proof since both owner and delegate',\n                        'are included in the token data hash, which is a public input to the',\n                        'validity proof.',\n                    ],\n                },\n                {\n                    name: 'cpiAuthorityPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'lightSystemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'registeredProgramPda',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'noopProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionAuthority',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'accountCompressionProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n                {\n                    name: 'selfProgram',\n                    isMut: false,\n                    isSigner: false,\n                    docs: ['this program is the signer of the cpi.'],\n                },\n                {\n                    name: 'tokenPoolPda',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'compressOrDecompressTokenAccount',\n                    isMut: true,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'tokenProgram',\n                    isMut: false,\n                    isSigner: false,\n                    isOptional: true,\n                },\n                {\n                    name: 'systemProgram',\n                    isMut: false,\n                    isSigner: false,\n                },\n            ],\n            args: [\n                {\n                    name: 'inputs1',\n                    type: {\n                        defined: 'CompressedTokenInstructionDataTransfer',\n                    },\n                },\n                {\n                    name: 'inputs2',\n                    type: {\n                        defined: 'TokenData',\n                    },\n                },\n            ],\n        },\n    ],\n    types: [\n        {\n            name: 'AccountState',\n            type: {\n                kind: 'enum',\n                variants: [\n                    {\n                        name: 'Initialized',\n                    },\n                    {\n                        name: 'Frozen',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccount',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'lamports',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'address',\n                        type: {\n                            option: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: {\n                            option: {\n                                defined: 'CompressedAccountData',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedAccountData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'discriminator',\n                        type: {\n                            array: ['u8', 8],\n                        },\n                    },\n                    {\n                        name: 'data',\n                        type: 'bytes',\n                    },\n                    {\n                        name: 'dataHash',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedCpiContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'setContext',\n                        docs: [\n                            'Is set by the program that is invoking the CPI to signal that is should',\n                            'set the cpi context.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'firstSetContext',\n                        docs: [\n                            'Is set to wipe the cpi context since someone could have set it before',\n                            'with unrelated data.',\n                        ],\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContextAccountIndex',\n                        docs: [\n                            'Index of cpi context account in remaining accounts.',\n                        ],\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedProof',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'a',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'b',\n                        type: {\n                            array: ['u8', 64],\n                        },\n                    },\n                    {\n                        name: 'c',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'CompressedTokenInstructionDataTransfer',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'mint',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'delegatedTransfer',\n                        docs: [\n                            'Is required if the signer is delegate,',\n                            '-> delegate is authority account,',\n                            'owner = Some(owner) is the owner of the token account.',\n                        ],\n                        type: {\n                            option: {\n                                defined: 'DelegatedTransfer',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputTokenDataWithContext',\n                        type: {\n                            vec: {\n                                defined: 'InputTokenDataWithContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined: 'PackedTokenTransferOutputData',\n                            },\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressAmount',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'lamportsChangeAccountMerkleTreeIndex',\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'DelegatedTransfer',\n            docs: [\n                'Struct to provide the owner when the delegate is signer of the transaction.',\n            ],\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'delegateChangeAccountIndex',\n                        docs: [\n                            'Index of change compressed account in output compressed accounts. In',\n                            \"case that the delegate didn't spend the complete delegated compressed\",\n                            'account balance the change compressed account will be delegated to her',\n                            'as well.',\n                        ],\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InputTokenDataWithContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'amount',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'delegateIndex',\n                        type: {\n                            option: 'u8',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        type: 'u16',\n                    },\n                    {\n                        name: 'lamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvoke',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'InstructionDataInvokeCpi',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'proof',\n                        type: {\n                            option: {\n                                defined: 'CompressedProof',\n                            },\n                        },\n                    },\n                    {\n                        name: 'newAddressParams',\n                        type: {\n                            vec: {\n                                defined: 'NewAddressParamsPacked',\n                            },\n                        },\n                    },\n                    {\n                        name: 'inputCompressedAccountsWithMerkleContext',\n                        type: {\n                            vec: {\n                                defined:\n                                    'PackedCompressedAccountWithMerkleContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'cpiContext',\n                        type: {\n                            option: {\n                                defined: 'CompressedCpiContext',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'MerkleTreeSequenceNumber',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'pubkey',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'seq',\n                        type: 'u64',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'NewAddressParamsPacked',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'seed',\n                        type: {\n                            array: ['u8', 32],\n                        },\n                    },\n                    {\n                        name: 'addressQueueAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeAccountIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'addressMerkleTreeRootIndex',\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'OutputCompressedAccountWithPackedContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedCompressedAccountWithMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'compressedAccount',\n                        type: {\n                            defined: 'CompressedAccount',\n                        },\n                    },\n                    {\n                        name: 'merkleContext',\n                        type: {\n                            defined: 'PackedMerkleContext',\n                        },\n                    },\n                    {\n                        name: 'rootIndex',\n                        docs: [\n                            'Index of root used in inclusion validity proof.',\n                        ],\n                        type: 'u16',\n                    },\n                    {\n                        name: 'readOnly',\n                        docs: [\n                            'Placeholder to mark accounts read-only unimplemented set to false.',\n                        ],\n                        type: 'bool',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedMerkleContext',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'merkleTreePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'nullifierQueuePubkeyIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'leafIndex',\n                        type: 'u32',\n                    },\n                    {\n                        name: 'queueIndex',\n                        type: {\n                            option: {\n                                defined: 'QueueIndex',\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PackedTokenTransferOutputData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'owner',\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'amount',\n                        type: 'u64',\n                    },\n                    {\n                        name: 'lamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'merkleTreeIndex',\n                        type: 'u8',\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'PublicTransactionEvent',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'inputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccountHashes',\n                        type: {\n                            vec: {\n                                array: ['u8', 32],\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputCompressedAccounts',\n                        type: {\n                            vec: {\n                                defined:\n                                    'OutputCompressedAccountWithPackedContext',\n                            },\n                        },\n                    },\n                    {\n                        name: 'outputLeafIndices',\n                        type: {\n                            vec: 'u32',\n                        },\n                    },\n                    {\n                        name: 'sequenceNumbers',\n                        type: {\n                            vec: {\n                                defined: 'MerkleTreeSequenceNumber',\n                            },\n                        },\n                    },\n                    {\n                        name: 'relayFee',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'isCompress',\n                        type: 'bool',\n                    },\n                    {\n                        name: 'compressOrDecompressLamports',\n                        type: {\n                            option: 'u64',\n                        },\n                    },\n                    {\n                        name: 'pubkeyArray',\n                        type: {\n                            vec: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'message',\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            name: 'QueueIndex',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'queueId',\n                        docs: ['Id of queue in queue account.'],\n                        type: 'u8',\n                    },\n                    {\n                        name: 'index',\n                        docs: ['Index of compressed account hash in queue.'],\n                        type: 'u16',\n                    },\n                ],\n            },\n        },\n        {\n            name: 'TokenData',\n            type: {\n                kind: 'struct',\n                fields: [\n                    {\n                        name: 'mint',\n                        docs: ['The mint associated with this account'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'owner',\n                        docs: ['The owner of this account.'],\n                        type: 'publicKey',\n                    },\n                    {\n                        name: 'amount',\n                        docs: ['The amount of tokens this account holds.'],\n                        type: 'u64',\n                    },\n                    {\n                        name: 'delegate',\n                        docs: [\n                            'If `delegate` is `Some` then `delegated_amount` represents',\n                            'the amount authorized by the delegate',\n                        ],\n                        type: {\n                            option: 'publicKey',\n                        },\n                    },\n                    {\n                        name: 'state',\n                        docs: [\"The account's state\"],\n                        type: {\n                            defined: 'AccountState',\n                        },\n                    },\n                    {\n                        name: 'tlv',\n                        docs: [\n                            'Placeholder for TokenExtension tlv data (unimplemented)',\n                        ],\n                        type: {\n                            option: 'bytes',\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    errors: [\n        {\n            code: 6000,\n            name: 'PublicKeyAmountMissmatch',\n            msg: 'public keys and amounts must be of same length',\n        },\n        {\n            code: 6001,\n            name: 'ComputeInputSumFailed',\n            msg: 'ComputeInputSumFailed',\n        },\n        {\n            code: 6002,\n            name: 'ComputeOutputSumFailed',\n            msg: 'ComputeOutputSumFailed',\n        },\n        {\n            code: 6003,\n            name: 'ComputeCompressSumFailed',\n            msg: 'ComputeCompressSumFailed',\n        },\n        {\n            code: 6004,\n            name: 'ComputeDecompressSumFailed',\n            msg: 'ComputeDecompressSumFailed',\n        },\n        {\n            code: 6005,\n            name: 'SumCheckFailed',\n            msg: 'SumCheckFailed',\n        },\n        {\n            code: 6006,\n            name: 'DecompressRecipientUndefinedForDecompress',\n            msg: 'DecompressRecipientUndefinedForDecompress',\n        },\n        {\n            code: 6007,\n            name: 'CompressedPdaUndefinedForDecompress',\n            msg: 'CompressedPdaUndefinedForDecompress',\n        },\n        {\n            code: 6008,\n            name: 'DeCompressAmountUndefinedForDecompress',\n            msg: 'DeCompressAmountUndefinedForDecompress',\n        },\n        {\n            code: 6009,\n            name: 'CompressedPdaUndefinedForCompress',\n            msg: 'CompressedPdaUndefinedForCompress',\n        },\n        {\n            code: 6010,\n            name: 'DeCompressAmountUndefinedForCompress',\n            msg: 'DeCompressAmountUndefinedForCompress',\n        },\n        {\n            code: 6011,\n            name: 'DelegateSignerCheckFailed',\n            msg: 'DelegateSignerCheckFailed',\n        },\n        {\n            code: 6012,\n            name: 'MintTooLarge',\n            msg: 'Minted amount greater than u64::MAX',\n        },\n        {\n            code: 6013,\n            name: 'SplTokenSupplyMismatch',\n            msg: 'SplTokenSupplyMismatch',\n        },\n        {\n            code: 6014,\n            name: 'HeapMemoryCheckFailed',\n            msg: 'HeapMemoryCheckFailed',\n        },\n        {\n            code: 6015,\n            name: 'InstructionNotCallable',\n            msg: 'The instruction is not callable',\n        },\n        {\n            code: 6016,\n            name: 'ArithmeticUnderflow',\n            msg: 'ArithmeticUnderflow',\n        },\n        {\n            code: 6017,\n            name: 'HashToFieldError',\n            msg: 'HashToFieldError',\n        },\n        {\n            code: 6018,\n            name: 'InvalidAuthorityMint',\n            msg: 'Expected the authority to be also a mint authority',\n        },\n        {\n            code: 6019,\n            name: 'InvalidFreezeAuthority',\n            msg: 'Provided authority is not the freeze authority',\n        },\n        {\n            code: 6020,\n            name: 'InvalidDelegateIndex',\n        },\n        {\n            code: 6021,\n            name: 'TokenPoolPdaUndefined',\n        },\n        {\n            code: 6022,\n            name: 'IsTokenPoolPda',\n            msg: 'Compress or decompress recipient is the same account as the token pool pda.',\n        },\n        {\n            code: 6023,\n            name: 'InvalidTokenPoolPda',\n        },\n        {\n            code: 6024,\n            name: 'NoInputTokenAccountsProvided',\n        },\n        {\n            code: 6025,\n            name: 'NoInputsProvided',\n        },\n        {\n            code: 6026,\n            name: 'MintHasNoFreezeAuthority',\n        },\n        {\n            code: 6027,\n            name: 'MintWithInvalidExtension',\n        },\n        {\n            code: 6028,\n            name: 'InsufficientTokenAccountBalance',\n            msg: 'The token account balance is less than the remaining amount.',\n        },\n        {\n            code: 6029,\n            name: 'InvalidTokenPoolBump',\n            msg: 'Max number of token pools reached.',\n        },\n        {\n            code: 6030,\n            name: 'FailedToDecompress',\n        },\n        {\n            code: 6031,\n            name: 'FailedToBurnSplTokensFromTokenPool',\n        },\n        {\n            code: 6032,\n            name: 'NoMatchingBumpFound',\n        },\n    ],\n};\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n    pickRandomTreeAndQueue,\n} from '@lightprotocol/stateless.js';\nimport { CompressedTokenProgram } from '../program';\nimport { getOrCreateAssociatedTokenAccount } from '@solana/spl-token';\n\n/**\n * Mint compressed tokens to a solana address from an external mint authority\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param merkleTree     State tree account that the compressed tokens should be\n *                       part of. Defaults to random public state tree account.\n * @param confirmOptions Options for confirming the transaction\n *\n * @return Signature of the confirmed transaction\n */\nexport async function approveAndMintTo(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer,\n    amount: number | BN,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const authorityTokenAccount = await getOrCreateAssociatedTokenAccount(\n        rpc,\n        payer,\n        mint,\n        authority.publicKey,\n        undefined,\n        undefined,\n        confirmOptions,\n        tokenProgramId,\n    );\n\n    if (!merkleTree) {\n        const stateTreeInfo = await rpc.getCachedActiveStateTreeInfo();\n        const { tree } = pickRandomTreeAndQueue(stateTreeInfo);\n        merkleTree = tree;\n    }\n\n    const ixs = await CompressedTokenProgram.approveAndMintTo({\n        feePayer: payer.publicKey,\n        mint,\n        authority: authority.publicKey,\n        authorityTokenAccount: authorityTokenAccount.address,\n        amount,\n        toPubkey: destination,\n        merkleTree,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [authority]);\n\n    const tx = buildAndSignTx(\n        [\n            ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }),\n            ...ixs,\n        ],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n    ComputeBudgetProgram,\n} from '@solana/web3.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n    pickRandomTreeAndQueue,\n} from '@lightprotocol/stateless.js';\n\nimport BN from 'bn.js';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Compress SPL tokens\n *\n * @param rpc                   Rpc connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint of the compressed token\n * @param amount                Number of tokens to transfer\n * @param owner                 Owner of the compressed tokens.\n * @param sourceTokenAccount    Source (associated) token account\n * @param toAddress             Destination address of the recipient\n * @param merkleTree            State tree account that the compressed tokens\n *                              should be inserted into. Defaults to a default\n *                              state tree account.\n * @param confirmOptions        Options for confirming the transaction\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function compress(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | BN | number[] | BN[],\n    owner: Signer,\n    sourceTokenAccount: PublicKey,\n    toAddress: PublicKey | Array<PublicKey>,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    if (!merkleTree) {\n        const stateTreeInfo = await rpc.getCachedActiveStateTreeInfo();\n        const { tree } = pickRandomTreeAndQueue(stateTreeInfo);\n        merkleTree = tree;\n    }\n\n    const compressIx = await CompressedTokenProgram.compress({\n        payer: payer.publicKey,\n        owner: owner.publicKey,\n        source: sourceTokenAccount,\n        toAddress,\n        amount,\n        mint,\n        outputStateTree: merkleTree,\n        tokenProgramId,\n    });\n\n    const blockhashCtx = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [\n            ComputeBudgetProgram.setComputeUnitLimit({\n                units: 1_000_000,\n            }),\n            compressIx,\n        ],\n        payer,\n        blockhashCtx.blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(\n        rpc,\n        signedTx,\n        confirmOptions,\n        blockhashCtx,\n    );\n    return txId;\n}\n","import {\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n    ComputeBudgetProgram,\n} from '@solana/web3.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport BN from 'bn.js';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Compress SPL tokens into compressed token format\n *\n * @param rpc                   Rpc connection to use\n * @param payer                 Payer of the transaction fees\n * @param mint                  Mint of the token to compress\n * @param owner                 Owner of the token account\n * @param tokenAccount         Token account to compress\n * @param outputStateTree       State tree to insert the compressed token account into\n * @param remainingAmount      Optional: amount to leave in token account. Default: 0\n * @param confirmOptions       Options for confirming the transaction\n *\n * @return Signature of the confirmed transaction\n */\nexport async function compressSplTokenAccount(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer,\n    tokenAccount: PublicKey,\n    outputStateTree: PublicKey,\n    remainingAmount?: BN,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const compressIx = await CompressedTokenProgram.compressSplTokenAccount({\n        feePayer: payer.publicKey,\n        authority: owner.publicKey,\n        tokenAccount,\n        mint,\n        remainingAmount,\n        outputStateTree,\n        tokenProgramId,\n    });\n\n    const blockhashCtx = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [\n            ComputeBudgetProgram.setComputeUnitLimit({\n                units: 1_000_000,\n            }),\n            compressIx,\n        ],\n        payer,\n        blockhashCtx.blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(\n        rpc,\n        signedTx,\n        confirmOptions,\n        blockhashCtx,\n    );\n    return txId;\n}\n","import {\n    ConfirmOptions,\n    Keypair,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { CompressedTokenProgram } from '../program';\nimport {\n    MINT_SIZE,\n    TOKEN_2022_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport {\n    Rpc,\n    buildAndSignTx,\n    sendAndConfirmTx,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\n/**\n * Create and initialize a new compressed token mint\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param tokenProgramId  Program ID for the token. Defaults to\n *                        TOKEN_PROGRAM_ID. You can pass in a boolean to\n *                        automatically resolve to TOKEN_2022_PROGRAM_ID if\n *                        true, or TOKEN_PROGRAM_ID if false.\n * @param freezeAuthority Account that will control freeze and thaw. Defaults to null.\n *\n * @return Address of the new mint and the transaction signature\n */\nexport async function createMint(\n    rpc: Rpc,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey | boolean,\n    freezeAuthority?: PublicKey,\n): Promise<{ mint: PublicKey; transactionSignature: TransactionSignature }> {\n    const rentExemptBalance =\n        await rpc.getMinimumBalanceForRentExemption(MINT_SIZE);\n\n    // If true, uses TOKEN_2022_PROGRAM_ID.\n    // If false or undefined, defaults to TOKEN_PROGRAM_ID.\n    // Otherwise, uses the provided tokenProgramId.\n    const resolvedTokenProgramId =\n        tokenProgramId === true\n            ? TOKEN_2022_PROGRAM_ID\n            : tokenProgramId || TOKEN_PROGRAM_ID;\n\n    const ixs = await CompressedTokenProgram.createMint({\n        feePayer: payer.publicKey,\n        mint: keypair.publicKey,\n        decimals,\n        authority: mintAuthority,\n        freezeAuthority: freezeAuthority || null,\n        rentExemptBalance,\n        tokenProgramId: resolvedTokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const additionalSigners = dedupeSigner(payer, [keypair]);\n\n    const tx = buildAndSignTx(ixs, payer, blockhash, additionalSigners);\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return { mint: keypair.publicKey, transactionSignature: txId };\n}\n","import {\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { CompressedTokenProgram } from '../program';\nimport {\n    Rpc,\n    buildAndSignTx,\n    sendAndConfirmTx,\n} from '@lightprotocol/stateless.js';\n\n/**\n * Register an existing mint with the CompressedToken program\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting. Is signer.\n * @param mintAddress     Address of the existing mint\n * @param confirmOptions  Options for confirming the transaction\n *\n * @return transaction signature\n */\nexport async function createTokenPool(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const ix = await CompressedTokenProgram.createTokenPool({\n        feePayer: payer.publicKey,\n        mint,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const tx = buildAndSignTx([ix], payer, blockhash);\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import { PublicKey, Signer, TransactionSignature } from '@solana/web3.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Create a lookup table for the token program's default accounts\n *\n * @param rpc                   Rpc connection to use\n * @param payer                 Payer of the transaction fees\n * @param authority             Authority of the lookup table\n * @param mints                 Optional array of mint public keys to include in\n *                              the lookup table\n * @param additionalAccounts    Optional array of additional account public keys\n *                              to include in the lookup table\n *\n * @return Transaction signatures and the address of the created lookup table\n */\nexport async function createTokenProgramLookupTable(\n    rpc: Rpc,\n    payer: Signer,\n    authority: Signer,\n    mints?: PublicKey[],\n    additionalAccounts?: PublicKey[],\n): Promise<{ txIds: TransactionSignature[]; address: PublicKey }> {\n    const recentSlot = await rpc.getSlot('finalized');\n    const { instructions, address } =\n        await CompressedTokenProgram.createTokenProgramLookupTable({\n            payer: payer.publicKey,\n            authority: authority.publicKey,\n            mints,\n            remainingAccounts: additionalAccounts,\n            recentSlot,\n        });\n\n    const additionalSigners = dedupeSigner(payer, [authority]);\n    const blockhashCtx = await rpc.getLatestBlockhash();\n    const signedTx = buildAndSignTx(\n        [instructions[0]],\n        payer,\n        blockhashCtx.blockhash,\n        additionalSigners,\n    );\n\n    /// Must wait for the first instruction to be finalized.\n    const txId = await sendAndConfirmTx(\n        rpc,\n        signedTx,\n        { commitment: 'finalized' },\n        blockhashCtx,\n    );\n\n    const blockhashCtx2 = await rpc.getLatestBlockhash();\n    const signedTx2 = buildAndSignTx(\n        [instructions[1]],\n        payer,\n        blockhashCtx2.blockhash,\n        additionalSigners,\n    );\n    const txId2 = await sendAndConfirmTx(\n        rpc,\n        signedTx2,\n        { commitment: 'finalized' },\n        blockhashCtx2,\n    );\n\n    return { txIds: [txId, txId2], address };\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    bn,\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport BN from 'bn.js';\n\nimport { CompressedTokenProgram } from '../program';\nimport { selectMinCompressedTokenAccountsForTransfer } from '../utils';\n\n/**\n * Decompress compressed tokens\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint of the compressed token\n * @param amount         Number of tokens to transfer\n * @param owner          Owner of the compressed tokens\n * @param toAddress      Destination **uncompressed** (associated) token account\n *                       address.\n * @param merkleTree     State tree account that any change compressed tokens should be\n *                       inserted into. Defaults to a default state tree\n *                       account.\n * @param confirmOptions Options for confirming the transaction\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function decompress(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | BN,\n    owner: Signer,\n    toAddress: PublicKey,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    amount = bn(amount);\n\n    const compressedTokenAccounts = await rpc.getCompressedTokenAccountsByOwner(\n        owner.publicKey,\n        {\n            mint,\n        },\n    );\n\n    /// TODO: consider using a different selection algorithm\n    const [inputAccounts] = selectMinCompressedTokenAccountsForTransfer(\n        compressedTokenAccounts.items,\n        amount,\n    );\n\n    const proof = await rpc.getValidityProof(\n        inputAccounts.map(account => bn(account.compressedAccount.hash)),\n    );\n\n    const ix = await CompressedTokenProgram.decompress({\n        payer: payer.publicKey,\n        inputCompressedTokenAccounts: inputAccounts,\n        toAddress, // TODO: add explicit check that it is a token account\n        amount,\n        outputStateTree: merkleTree,\n        recentInputStateRootIndices: proof.rootIndices,\n        recentValidityProof: proof.compressedProof,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    Rpc,\n    dedupeSigner,\n    buildAndSignTx,\n    sendAndConfirmTx,\n    bn,\n} from '@lightprotocol/stateless.js';\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Merge multiple compressed token accounts for a given mint into a single\n * account\n *\n * @param rpc             RPC to use\n * @param payer           Payer of the transaction fees\n * @param mint            Public key of the token's mint\n * @param owner           Owner of the token accounts to be merged\n * @param merkleTree      Optional merkle tree for compressed tokens\n * @param confirmOptions  Options for confirming the transaction\n *\n * @return Array of transaction signatures\n */\nexport async function mergeTokenAccounts(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    owner: Signer,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    const compressedTokenAccounts = await rpc.getCompressedTokenAccountsByOwner(\n        owner.publicKey,\n        { mint },\n    );\n\n    if (compressedTokenAccounts.items.length === 0) {\n        throw new Error(\n            `No compressed token accounts found for mint ${mint.toBase58()}`,\n        );\n    }\n    if (compressedTokenAccounts.items.length >= 6) {\n        throw new Error(\n            `Too many compressed token accounts used for mint ${mint.toBase58()}`,\n        );\n    }\n\n    const instructions = [\n        ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }),\n    ];\n\n    for (\n        let i = 0;\n        i < compressedTokenAccounts.items.slice(0, 6).length;\n        i += 3\n    ) {\n        const batch = compressedTokenAccounts.items.slice(i, i + 3);\n\n        const proof = await rpc.getValidityProof(\n            batch.map(account => bn(account.compressedAccount.hash)),\n        );\n\n        const batchInstructions =\n            await CompressedTokenProgram.mergeTokenAccounts({\n                payer: payer.publicKey,\n                owner: owner.publicKey,\n                mint,\n                inputCompressedTokenAccounts: batch,\n                outputStateTree: merkleTree!,\n                recentValidityProof: proof.compressedProof,\n                recentInputStateRootIndices: proof.rootIndices,\n            });\n\n        instructions.push(...batchInstructions);\n    }\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n\n    const signedTx = buildAndSignTx(\n        instructions,\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n    pickRandomTreeAndQueue,\n} from '@lightprotocol/stateless.js';\nimport { CompressedTokenProgram } from '../program';\n\n/**\n * Mint compressed tokens to a solana address\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to. Can be an array of\n *                       addresses if the amount is an array of amounts.\n * @param authority      Minting authority\n * @param amount         Amount to mint. Can be an array of amounts if the\n *                       destination is an array of addresses.\n * @param merkleTree     State tree account that the compressed tokens should be\n *                       part of. Defaults to the default state tree account.\n * @param confirmOptions Options for confirming the transaction\n *\n * @return Signature of the confirmed transaction\n */\nexport async function mintTo(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey | PublicKey[],\n    authority: Signer,\n    amount: number | BN | number[] | BN[],\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    tokenProgramId?: PublicKey,\n): Promise<TransactionSignature> {\n    tokenProgramId = tokenProgramId\n        ? tokenProgramId\n        : await CompressedTokenProgram.get_mint_program_id(mint, rpc);\n\n    const additionalSigners = dedupeSigner(payer, [authority]);\n\n    if (!merkleTree) {\n        const stateTreeInfo = await rpc.getCachedActiveStateTreeInfo();\n        const { tree } = pickRandomTreeAndQueue(stateTreeInfo);\n        merkleTree = tree;\n    }\n\n    const ix = await CompressedTokenProgram.mintTo({\n        feePayer: payer.publicKey,\n        mint,\n        authority: authority.publicKey,\n        amount: amount,\n        toPubkey: destination,\n        merkleTree,\n        tokenProgramId,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n\n    const tx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n\n    const txId = await sendAndConfirmTx(rpc, tx, confirmOptions);\n\n    return txId;\n}\n","import {\n    ComputeBudgetProgram,\n    ConfirmOptions,\n    PublicKey,\n    Signer,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport {\n    bn,\n    sendAndConfirmTx,\n    buildAndSignTx,\n    Rpc,\n    dedupeSigner,\n} from '@lightprotocol/stateless.js';\n\nimport BN from 'bn.js';\n\nimport { CompressedTokenProgram } from '../program';\nimport { selectMinCompressedTokenAccountsForTransfer } from '../utils';\n\n/**\n * Transfer compressed tokens from one owner to another\n *\n * @param rpc            Rpc to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint of the compressed token\n * @param amount         Number of tokens to transfer\n * @param owner          Owner of the compressed tokens\n * @param toAddress      Destination address of the recipient\n * @param merkleTree     State tree account that the compressed tokens should be\n *                       inserted into. Defaults to the default state tree\n *                       account.\n * @param confirmOptions Options for confirming the transaction\n *\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transfer(\n    rpc: Rpc,\n    payer: Signer,\n    mint: PublicKey,\n    amount: number | BN,\n    owner: Signer,\n    toAddress: PublicKey,\n    merkleTree?: PublicKey,\n    confirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n    amount = bn(amount);\n    const compressedTokenAccounts = await rpc.getCompressedTokenAccountsByOwner(\n        owner.publicKey,\n        {\n            mint,\n        },\n    );\n\n    const [inputAccounts] = selectMinCompressedTokenAccountsForTransfer(\n        compressedTokenAccounts.items,\n        amount,\n    );\n\n    const proof = await rpc.getValidityProof(\n        inputAccounts.map(account => bn(account.compressedAccount.hash)),\n    );\n\n    const ix = await CompressedTokenProgram.transfer({\n        payer: payer.publicKey,\n        inputCompressedTokenAccounts: inputAccounts,\n        toAddress,\n        amount,\n        recentInputStateRootIndices: proof.rootIndices,\n        recentValidityProof: proof.compressedProof,\n        outputStateTrees: merkleTree,\n    });\n\n    const { blockhash } = await rpc.getLatestBlockhash();\n    const additionalSigners = dedupeSigner(payer, [owner]);\n    const signedTx = buildAndSignTx(\n        [ComputeBudgetProgram.setComputeUnitLimit({ units: 1_000_000 }), ix],\n        payer,\n        blockhash,\n        additionalSigners,\n    );\n\n    const txId = await sendAndConfirmTx(rpc, signedTx, confirmOptions);\n    return txId;\n}\n"],"names":["packCompressedTokenAccounts","params","inputCompressedTokenAccounts","outputStateTrees","remainingAccounts","rootIndices","tokenTransferOutputs","_remainingAccounts","slice","delegateIndex","length","parsed","delegate","getIndexOrAdd","packedInputTokenData","forEach","account","index","merkleTreePubkeyIndex","compressedAccount","merkleTree","nullifierQueuePubkeyIndex","nullifierQueue","push","amount","merkleContext","leafIndex","queueIndex","rootIndex","lamports","eq","bn","tlv","paddedOutputStateMerkleTrees","padOutputStateMerkleTrees","map","acc","packedOutputTokenData","merkleTreeIndex","owner","_a","remainingAccountMetas","pubkey","isWritable","isSigner","inputTokenDataWithContext","POOL_SEED","Buffer","from","CPI_AUTHORITY_SEED","CREATE_TOKEN_POOL_DISCRIMINATOR","MINT_TO_DISCRIMINATOR","TRANSFER_DISCRIMINATOR","COMPRESS_SPL_TOKEN_ACCOUNT_DISCRIMINATOR","module","exports","assert","val","msg","Error","inherits","ctor","superCtor","super_","TempCtor","prototype","constructor","BN","number","base","endian","isBN","this","negative","words","red","_init","wordSize","window","require$$0","e","parseHex4Bits","string","c","charCodeAt","parseHexByte","lowerBound","r","parseBase","str","start","end","mul","b","len","Math","min","i","move","dest","src","num","Array","isArray","max","left","right","cmp","_initNumber","_initArray","toString","replace","_parseHex","_parseBase","toArray","ceil","j","w","off","_strip","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","_move","clone","_expand","size","_normSign","Symbol","for","inspect","zeros","groupSizes","groupBases","smallMulTo","self","out","a","lo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modrn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","res","allocUnsafe","allocate","_toArrayLikeLE","position","shift","_toArrayLikeBE","clz32","_countBits","t","_zeroBits","bitLength","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","add","sub","comb10MulTo","mid","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","mulTo","mulf","isNegNum","muln","sqr","isqr","toBitArray","q","iushln","bits","s","carryMask","newCarry","ishln","iushrn","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","m","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","andln","p","modn","egcd","x","y","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","name","n","tmp","_tmp","K256","call","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","split","imulK","undefined","strip","input","output","outLen","prev","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","CompressedProofLayout","struct","array","u8","PackedTokenTransferOutputDataLayout","publicKey","u64","option","vecU8","QueueIndexLayout","u16","InputTokenDataWithContextLayout","u32","DelegatedTransferLayout","CpiContextLayout","bool","CompressedTokenInstructionDataTransferLayout","vec","mintToLayout","compressSplTokenAccountInstructionDataLayout","encodeMintToInstructionData","data","buffer","alloc","encode","recipients","amounts","concat","encodeCompressSplTokenAccountInstructionData","remainingAmount","cpiContext","encodeTransferInstructionData","lengthBuffer","writeUInt32LE","createTokenPoolAccountsLayout","accounts","feePayer","tokenPoolPda","systemProgram","mint","tokenProgram","cpiAuthorityPda","mintToAccountsLayout","defaultPubkey","CompressedTokenProgram","programId","authority","lightSystemProgram","registeredProgramPda","noopProgram","accountCompressionAuthority","accountCompressionProgram","selfProgram","solPoolPda","transferAccountsLayout","compressOrDecompressTokenAccount","sumUpTokenAmount","reduce","validateSameTokenOwner","equals","parseTokenData","compressedTokenAccounts","currentOwner","createTransferOutputState","toAddress","inputAmount","inputLamports","sumUpLamports","changeAmount","validateSufficientBalance","validateSameOwner","createDecompressOutputState","setProgramId","PublicKey","deriveTokenPoolPda","seeds","address","_","findProgramAddressSync","deriveCpiAuthorityPda","createMint","rentExemptBalance","tokenProgramId","freezeAuthority","mintSize","TOKEN_PROGRAM_ID","SystemProgram","createAccount","fromPubkey","newAccountPubkey","space","MINT_SIZE","createInitializeMint2Instruction","decimals","createTokenPool","keys","TransactionInstruction","mintTo","systemKeys","defaultStaticAccountsStruct","toPubkey","toPubkeys","LightSystemProgram","defaultTestStateTreeAccounts","approveAndMintTo","authorityTokenAccount","BigInt","createMintToInstruction","compress","payer","source","outputStateTree","transfer","recentInputStateRootIndices","recentValidityProof","proof","delegatedTransfer","outputCompressedAccounts","compressOrDecompressAmount","isCompress","lamportsChangeAccountMerkleTreeIndex","createTokenProgramLookupTable","mints","recentSlot","createInstruction","lookupTableAddress","AddressLookupTableProgram","createLookupTable","optionalMintKeys","instructions","extendLookupTable","lookupTable","addresses","addressTree","addressQueue","TOKEN_2022_PROGRAM_ID","amt","sum","Object","assign","decompress","mergeTokenAccounts","compressSplTokenAccount","tokenAccount","get_mint_program_id","connection","getAccountInfo","ERROR_NO_ACCOUNTS_FOUND","selectMinCompressedTokenAccountsForTransfer","transferAmount","maxInputs","selectedAccounts","accumulatedAmount","accumulatedLamports","maxPossibleAmount","selectMinCompressedTokenAccountsForTransferOrPartial","totalBalance","sort","selectSmartCompressedTokenAccountsForTransferOrPartial","nonZeroAccounts","filter","smallestAccount","version","docs","isMut","args","type","isOptional","defined","types","kind","variants","fields","errors","code","async","rpc","destination","confirmOptions","getOrCreateAssociatedTokenAccount","stateTreeInfo","getCachedActiveStateTreeInfo","tree","pickRandomTreeAndQueue","ixs","blockhash","getLatestBlockhash","additionalSigners","dedupeSigner","tx","buildAndSignTx","ComputeBudgetProgram","setComputeUnitLimit","units","sendAndConfirmTx","sourceTokenAccount","compressIx","blockhashCtx","signedTx","mintAuthority","keypair","Keypair","generate","getMinimumBalanceForRentExemption","resolvedTokenProgramId","txId","transactionSignature","ix","additionalAccounts","getSlot","commitment","blockhashCtx2","signedTx2","txIds","decode","getCompressedTokenAccountsByOwner","inputAccounts","items","getValidityProof","hash","compressedProof","toBase58","batch","batchInstructions"],"mappings":"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","x_google_ignoreList":[2]}