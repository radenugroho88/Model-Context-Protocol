import BN from 'bn.js';
import { Buffer } from 'buffer';
import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { ActiveTreeBundle } from './state/types';
export declare const FIELD_SIZE: BN;
export declare const HIGHEST_ADDRESS_PLUS_ONE: BN;
export declare const COMPUTE_BUDGET_PATTERN: number[];
export declare const INVOKE_DISCRIMINATOR: Buffer;
export declare const INVOKE_CPI_DISCRIMINATOR: Buffer;
export declare const INSERT_INTO_QUEUES_DISCRIMINATOR: Buffer;
export declare const noopProgram = "noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV";
export declare const lightProgram = "SySTEM1eSU2p4BGQfQpimFEWWSC1XDFeun3Nqzz3rT7";
export declare const accountCompressionProgram = "compr6CUsB5m2jS4Y3831ztGSTnDpnKJTKS95d64XVq";
export declare const getRegisteredProgramPda: () => PublicKey;
export declare const getAccountCompressionAuthority: () => PublicKey;
export declare const defaultStaticAccounts: () => PublicKey[];
export declare const defaultStaticAccountsStruct: () => {
    registeredProgramPda: PublicKey;
    noopProgram: PublicKey;
    accountCompressionProgram: PublicKey;
    accountCompressionAuthority: PublicKey;
    cpiSignatureAccount: null;
};
export type StateTreeLUTPair = {
    stateTreeLookupTable: PublicKey;
    nullifyTable: PublicKey;
};
/**
 * Returns the Default Public State Tree LUTs for Devnet and Mainnet-Beta.
 */
export declare const defaultStateTreeLookupTables: () => {
    mainnet: StateTreeLUTPair[];
    devnet: StateTreeLUTPair[];
};
/**
 * @internal
 */
export declare const isLocalTest: (url: string) => boolean;
/**
 * @internal
 */
export declare const localTestActiveStateTreeInfo: () => ActiveTreeBundle[];
/**
 * Use only with Localnet testing.
 * For public networks, fetch via {@link defaultStateTreeLookupTables} and {@link getLightStateTreeInfo}.
 */
export declare const defaultTestStateTreeAccounts: () => {
    nullifierQueue: PublicKey;
    merkleTree: PublicKey;
    merkleTreeHeight: number;
    addressTree: PublicKey;
    addressQueue: PublicKey;
};
/**
 * @internal testing only
 */
export declare const defaultTestStateTreeAccounts2: () => {
    nullifierQueue2: PublicKey;
    merkleTree2: PublicKey;
};
export declare const stateTreeLookupTableMainnet = "7i86eQs3GSqHjN47WdWLTCGMW6gde1q96G2EVnUyK2st";
export declare const nullifiedStateTreeLookupTableMainnet = "H9QD4u1fG7KmkAzn2tDXhheushxFe1EcrjGGyEFXeMqT";
export declare const stateTreeLookupTableDevnet = "8n8rH2bFRVA6cSGNDpgqcKHCndbFCT1bXxAQG89ejVsh";
export declare const nullifiedStateTreeLookupTableDevnet = "5dhaJLBjnVBQFErr8oiCJmcVsx3Zj6xDekGB2zULPsnP";
export declare const nullifierQueuePubkey = "nfq1NvQDJ2GEgnS8zt9prAe8rjjpAW1zFkrvZoBR148";
export declare const cpiContextPubkey = "cpi1uHzrEhBG733DoEJNgHCyRS3XmmyVNZx5fonubE4";
export declare const merkletreePubkey = "smt1NamzXdq4AMqS2fS2F1i5KTYPZRhoHgWx38d8WsT";
export declare const addressTree = "amt1Ayt45jfbdw5YSo7iz6WZxUmnZsQTYXy82hVwyC2";
export declare const addressQueue = "aq1S9z4reTSQAdgWHGD2zDaS39sjGrAxbR31vxJ2F4F";
export declare const merkleTree2Pubkey = "smt2rJAFdyJJupwMKAqTNAJwvjhmiZ4JYGZmbVRw1Ho";
export declare const nullifierQueue2Pubkey = "nfq2hgS7NYemXsFaFUCe3EMXSDSfnZnAe27jC6aPP1X";
export declare const cpiContext2Pubkey = "cpi2cdhkH5roePvcudTgUL8ppEBfTay1desGh8G8QxK";
export declare const confirmConfig: ConfirmOptions;
export declare const DEFAULT_MERKLE_TREE_HEIGHT = 26;
export declare const DEFAULT_MERKLE_TREE_ROOTS = 2800;
/** Threshold (per asset) at which new in-UTXOs get merged, in order to reduce UTXO pool size */
export declare const UTXO_MERGE_THRESHOLD = 20;
export declare const UTXO_MERGE_MAXIMUM = 10;
/**
 * Treshold after which the currently used transaction Merkle tree is switched
 * to the next one
 */
export declare const TRANSACTION_MERKLE_TREE_ROLLOVER_THRESHOLD: BN;
/**
 * Fee to provide continous funding for the state Merkle tree.
 * Once the state Merkle tree is at 95% capacity the accumulated fees
 * will be used to fund the next state Merkle tree with the same parameters.
 *
 * Is charged per output compressed account.
 */
export declare const STATE_MERKLE_TREE_ROLLOVER_FEE: BN;
/**
 * Fee to provide continous funding for the address queue and address Merkle tree.
 * Once the address Merkle tree is at 95% capacity the accumulated fees
 * will be used to fund the next address queue and address tree with the same parameters.
 *
 * Is charged per newly created address.
 */
export declare const ADDRESS_QUEUE_ROLLOVER_FEE: BN;
/**
 * Is charged if the transaction nullifies at least one compressed account.
 */
export declare const STATE_MERKLE_TREE_NETWORK_FEE: BN;
/**
 * Is charged if the transaction creates at least one address.
 */
export declare const ADDRESS_TREE_NETWORK_FEE: BN;
