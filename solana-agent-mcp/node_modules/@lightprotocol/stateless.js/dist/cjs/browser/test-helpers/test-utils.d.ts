import { Connection, Keypair, Signer } from '@solana/web3.js';
import { Rpc } from '../rpc';
export declare const ALICE: Keypair;
export declare const BOB: Keypair;
export declare const CHARLIE: Keypair;
export declare const DAVE: Keypair;
/**
 * Deep comparison of two objects. Handles BN comparison correctly.
 *
 * @param ref - The reference object to compare.
 * @param val - The value object to compare.
 * @returns True if the objects are deeply equal, false otherwise.
 */
export declare function deepEqual(ref: any, val: any): boolean;
/**
 * Create a new account and airdrop lamports to it
 *
 * @param rpc       connection to use
 * @param lamports  amount of lamports to airdrop
 * @param counter   counter to use for generating the keypair.
 *                  If undefined or >255, generates random keypair.
 */
export declare function newAccountWithLamports(rpc: Rpc, lamports?: number, counter?: number | undefined): Promise<Signer>;
export declare function getConnection(): Connection;
/**
 * For use in tests.
 * Generate a unique keypair by passing in a counter <255. If no counter
 * is supplied, it uses and increments a global counter.
 * if counter > 255, generates random keypair
 */
export declare function getTestKeypair(counter?: number | undefined): Keypair;
