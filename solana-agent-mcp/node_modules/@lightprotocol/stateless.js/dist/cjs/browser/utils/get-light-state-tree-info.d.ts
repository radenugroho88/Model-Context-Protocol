import { Connection, Keypair, PublicKey } from '@solana/web3.js';
import { ActiveTreeBundle } from '../state/types';
/**
 * Create two lookup tables storing all public state tree and queue addresses
 * returns lookup table addresses and txId
 *
 * @internal
 * @param connection - Connection to the Solana network
 * @param payer - Keypair of the payer
 * @param authority - Keypair of the authority
 * @param recentSlot - Slot of the recent block
 */
export declare function createStateTreeLookupTable({ connection, payer, authority, recentSlot, }: {
    connection: Connection;
    payer: Keypair;
    authority: Keypair;
    recentSlot: number;
}): Promise<{
    address: PublicKey;
    txId: string;
}>;
/**
 * Extend state tree lookup table with new state tree and queue addresses
 * @internal
 * @param connection - Connection to the Solana network
 * @param tableAddress - Address of the lookup table to extend
 * @param newStateTreeAddresses - Addresses of the new state trees to add
 * @param newQueueAddresses - Addresses of the new queues to add
 * @param newCpiContextAddresses - Addresses of the new cpi contexts to add
 * @param payer - Keypair of the payer
 * @param authority - Keypair of the authority
 */
export declare function extendStateTreeLookupTable({ connection, tableAddress, newStateTreeAddresses, newQueueAddresses, newCpiContextAddresses, payer, authority, }: {
    connection: Connection;
    tableAddress: PublicKey;
    newStateTreeAddresses: PublicKey[];
    newQueueAddresses: PublicKey[];
    newCpiContextAddresses: PublicKey[];
    payer: Keypair;
    authority: Keypair;
}): Promise<{
    tableAddress: PublicKey;
    txId: string;
}>;
/**
 * Adds state tree address to lookup table. Acts as nullifier lookup for rolled
 * over state trees.
 * @internal
 * @param connection - Connection to the Solana network
 * @param stateTreeAddress - Address of the state tree to nullify
 * @param nullifyTableAddress - Address of the nullifier lookup table to store
 * address in
 * @param stateTreeLookupTableAddress - lookup table storing all state tree
 * addresses
 * @param payer - Keypair of the payer
 * @param authority - Keypair of the authority
 */
export declare function nullifyLookupTable({ connection, fullStateTreeAddress, nullifyTableAddress, stateTreeLookupTableAddress, payer, authority, }: {
    connection: Connection;
    fullStateTreeAddress: PublicKey;
    nullifyTableAddress: PublicKey;
    stateTreeLookupTableAddress: PublicKey;
    payer: Keypair;
    authority: Keypair;
}): Promise<{
    txId: string;
}>;
/**
 *  Get most recent , active state tree data
 * we store in lookup table for each public state tree
 */
export declare function getLightStateTreeInfo({ connection, stateTreeLookupTableAddress, nullifyTableAddress, }: {
    connection: Connection;
    stateTreeLookupTableAddress: PublicKey;
    nullifyTableAddress: PublicKey;
}): Promise<ActiveTreeBundle[]>;
